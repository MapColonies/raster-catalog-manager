/* This file was auto-generated by MC-GENERATOR, DO NOT modify it manually */
/* eslint-disable import/exports-last, @typescript-eslint/ban-types */
import { RecordType, SensorType } from '@map-colonies/mc-model-types';
import { Column, Entity, Index, PrimaryColumn } from 'typeorm';

//TODO: add imports
@Entity({ name: 'records' })
// // TODO: Add indexes?
// @Index('discreteIndex', ['id', 'version'], { unique: true })
// // TODO: Rename class Metadata to RecordEntity
export class RecordEntity {
  //TODO: add default value to ts
  @Column({ name: 'type', type: 'text', nullable: true })
  public type?: RecordType = RecordType.RECORD_RASTER;
  @Column({ name: 'classification', type: 'text' })
  public classification: string;
  @Column({ name: 'product_id', type: 'text', nullable: false })
  public productId!: string;
  @Column({ name: 'product_name', type: 'text', nullable: true })
  public productName?: string;
  @Column({ name: 'product_version', type: 'text', nullable: true })
  public productVersion?: string;
  @Column({ name: 'product_type', type: 'text', nullable: true })
  public productType?: string;
  @Column({ name: 'description', type: 'text', nullable: true })
  public description?: string;
  @Column({ name: 'srs', type: 'text', nullable: true })
  public srsId?: string;
  @Column({ name: 'srs_name', type: 'text', nullable: true })
  public srsName?: string;
  //TODO: add default value to ts
  //TODO: rename 'defaultValue' attribute to default
  @Column({ name: 'producer_name', type: 'text', default: 'IDFMU', nullable: true })
  public producerName?: string = 'IDFMU';
  @Column({ name: 'creation_date', type: 'timestamp without time zone' })
  public creationDate: Date;
  @Column({ name: 'ingestion_date', type: 'timestamp without time zone' })
  public ingestionDate: Date;
  @Column({ name: 'update_date', type: 'timestamp without time zone' })
  public updateDate: Date;
  @Column({ name: 'source_start_date', type: 'timestamp without time zone' })
  public sourceDateStart: Date;
  @Column({ name: 'source_end_date', type: 'timestamp without time zone' })
  public sourceDateEnd: Date;
  @Column({ name: 'resolution', type: 'real' })
  public resolution: number;
  @Column({ name: 'horizontal_accuracy_ce_90', type: 'real' })
  public accuracyCE90: number;
  @Column({ name: 'sensor_type', type: 'text' })
  public sensorType: SensorType;
  @Column({ name: 'region', type: 'text', nullable: true })
  public region?: string;
  @Column({ name: 'rms', type: 'real', nullable: true })
  public rms?: number;
  @Column({ name: 'scale', type: 'text', nullable: true })
  public scale?: string;
  @Column({ name: 'footprint_geojson', type: 'text', nullable: true })
  public footprint?: object;
  //TODO: should be primary key
  @Column({ name: 'identifier', type: 'text', nullable: false })
  public id!: string;
  @Column({ name: 'typename', type: 'text' })
  public typeName: string;
  @Column({ name: 'schema', type: 'text' })
  public schema: string;
  @Column({ name: 'mdsource', type: 'text' })
  public mdSource: string;
  @Column({ name: 'xml', type: 'text' })
  public xml: string;
  @Column({ name: 'anytext', type: 'text' })
  public anyText: string;
  @Column({ name: 'insert_date', type: 'timestamp without time zone' })
  public insertDate: Date;
  @Column({ name: 'wkt_geometry', type: 'text', nullable: true })
  public wktGeometry?: string;
  @Column({ name: 'wkb_geometry', type: 'geometry', spatialFeatureType: 'Geometry', srid: 4326, nullable: true })
  public wkbGeometry?: string;
  @Column({ name: 'keywords', type: 'text' })
  public keywords: string;
  @Column({ name: 'anytext_tsvector', type: 'tsvector', nullable: true })
  public anyTextTsvector?: string;
  @Column({ name: 'links', type: 'text', nullable: true })
  public links?: string;
}
