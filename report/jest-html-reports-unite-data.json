[
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 0,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 1,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 0,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1622987088740,
    "success": false,
    "testResults": [
      {
        "failureMessage": "  \u001b[1m‚óè \u001b[22mTest suite failed to run\n\n    \u001b[96mtests/integration/records/jobs.spec.ts\u001b[0m:\u001b[93m109\u001b[0m:\u001b[93m44\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getResources' does not exist on type 'typeof import(\"D:/Git/Projects/raster-catalog-manager/tests/integration/records/helpers/recordsRequestSender\")'.\n\n    \u001b[7m109\u001b[0m       const response = await requestSender.getResources();\n    \u001b[7m   \u001b[0m \u001b[91m                                           ~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/records/jobs.spec.ts\u001b[0m:\u001b[93m131\u001b[0m:\u001b[93m44\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getResources' does not exist on type 'typeof import(\"D:/Git/Projects/raster-catalog-manager/tests/integration/records/helpers/recordsRequestSender\")'.\n\n    \u001b[7m131\u001b[0m       const response = await requestSender.getResources(filter);\n    \u001b[7m   \u001b[0m \u001b[91m                                           ~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/records/jobs.spec.ts\u001b[0m:\u001b[93m169\u001b[0m:\u001b[93m44\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getResource' does not exist on type 'typeof import(\"D:/Git/Projects/raster-catalog-manager/tests/integration/records/helpers/recordsRequestSender\")'.\n\n    \u001b[7m169\u001b[0m       const response = await requestSender.getResource('170dd8c0-8bad-498b-bb26-671dcf19aa3c');\n    \u001b[7m   \u001b[0m \u001b[91m                                           ~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/records/jobs.spec.ts\u001b[0m:\u001b[93m242\u001b[0m:\u001b[93m44\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getResource' does not exist on type 'typeof import(\"D:/Git/Projects/raster-catalog-manager/tests/integration/records/helpers/recordsRequestSender\")'.\n\n    \u001b[7m242\u001b[0m       const response = await requestSender.getResource('170dd8c0-8bad-498b-bb26-671dcf19aa3c');\n    \u001b[7m   \u001b[0m \u001b[91m                                           ~~~~~~~~~~~\u001b[0m\n",
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 0, "runtime": 0, "slow": false, "start": 0 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testExecError": {
          "diagnosticText": "\u001b[96mtests/integration/records/jobs.spec.ts\u001b[0m:\u001b[93m109\u001b[0m:\u001b[93m44\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getResources' does not exist on type 'typeof import(\"D:/Git/Projects/raster-catalog-manager/tests/integration/records/helpers/recordsRequestSender\")'.\n\n\u001b[7m109\u001b[0m       const response = await requestSender.getResources();\n\u001b[7m   \u001b[0m \u001b[91m                                           ~~~~~~~~~~~~\u001b[0m\n\u001b[96mtests/integration/records/jobs.spec.ts\u001b[0m:\u001b[93m131\u001b[0m:\u001b[93m44\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getResources' does not exist on type 'typeof import(\"D:/Git/Projects/raster-catalog-manager/tests/integration/records/helpers/recordsRequestSender\")'.\n\n\u001b[7m131\u001b[0m       const response = await requestSender.getResources(filter);\n\u001b[7m   \u001b[0m \u001b[91m                                           ~~~~~~~~~~~~\u001b[0m\n\u001b[96mtests/integration/records/jobs.spec.ts\u001b[0m:\u001b[93m169\u001b[0m:\u001b[93m44\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getResource' does not exist on type 'typeof import(\"D:/Git/Projects/raster-catalog-manager/tests/integration/records/helpers/recordsRequestSender\")'.\n\n\u001b[7m169\u001b[0m       const response = await requestSender.getResource('170dd8c0-8bad-498b-bb26-671dcf19aa3c');\n\u001b[7m   \u001b[0m \u001b[91m                                           ~~~~~~~~~~~\u001b[0m\n\u001b[96mtests/integration/records/jobs.spec.ts\u001b[0m:\u001b[93m242\u001b[0m:\u001b[93m44\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getResource' does not exist on type 'typeof import(\"D:/Git/Projects/raster-catalog-manager/tests/integration/records/helpers/recordsRequestSender\")'.\n\n\u001b[7m242\u001b[0m       const response = await requestSender.getResource('170dd8c0-8bad-498b-bb26-671dcf19aa3c');\n\u001b[7m   \u001b[0m \u001b[91m                                           ~~~~~~~~~~~\u001b[0m\n",
          "diagnosticCodes": [2339, 2339, 2339, 2339]
        },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": []
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1622987098550,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1622987211083,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1622987232947, "runtime": 20990, "slow": true, "start": 1622987211957 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 538,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:38:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:38:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record with tasks and return status code 201 and the created record and tasks ids",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record with tasks and return status code 201 and the created record and tasks ids"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record with tasks and return status code 201 and the created record and tasks ids\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 39 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 40 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 41 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:38:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1622987233424,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1622987317401,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1622987329766, "runtime": 11617, "slow": true, "start": 1622987318149 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 85,
            "failureDetails": [
              {
                "actual": "",
                "error": { "errno": -4058, "syscall": "open", "code": "ENOENT", "path": "./bundeledApi.yaml" },
                "expected": "",
                "matcherName": "",
                "message": "Error: ENOENT: no such file or directory, open './bundeledApi.yaml'",
                "passed": false,
                "stack": "Error: ENOENT: no such file or directory, open './bundeledApi.yaml'\n    at Object.openSync (fs.js:458:3)\n    at Object.readFileSync (fs.js:360:35)\n    at new OpenapiController (D:\\Git\\Projects\\raster-catalog-manager\\src\\common\\controllers\\openapi.ts:19:32)\n    at InternalDependencyContainer.construct (D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\tsyringe\\dist\\cjs\\dependency-container.js:267:16)\n    at InternalDependencyContainer.resolve (D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\tsyringe\\dist\\cjs\\dependency-container.js:105:33)\n    at Object.openapiRouterFactory (D:\\Git\\Projects\\raster-catalog-manager\\src\\common\\routes\\openapi.ts:8:42)\n    at ServerBuilder.buildRoutes (D:\\Git\\Projects\\raster-catalog-manager\\src\\serverBuilder.ts:34:34)\n    at ServerBuilder.build (D:\\Git\\Projects\\raster-catalog-manager\\src\\serverBuilder.ts:26:10)\n    at Object.init (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\helpers\\recordsRequestSender.ts:11:17)\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:14:19)"
              },
              {
                "actual": "",
                "error": {},
                "expected": "",
                "matcherName": "",
                "message": "TypeError: Cannot read property 'saveMock' of undefined",
                "passed": false,
                "stack": "TypeError: Cannot read property 'saveMock' of undefined\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:33:52)\n    at Object.asyncJestTest (D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: ENOENT: no such file or directory, open './bundeledApi.yaml'\n    at Object.openSync (fs.js:458:3)\n    at Object.readFileSync (fs.js:360:35)\n    at new OpenapiController (D:\\Git\\Projects\\raster-catalog-manager\\src\\common\\controllers\\openapi.ts:19:32)\n    at InternalDependencyContainer.construct (D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\tsyringe\\dist\\cjs\\dependency-container.js:267:16)\n    at InternalDependencyContainer.resolve (D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\tsyringe\\dist\\cjs\\dependency-container.js:105:33)\n    at Object.openapiRouterFactory (D:\\Git\\Projects\\raster-catalog-manager\\src\\common\\routes\\openapi.ts:8:42)\n    at ServerBuilder.buildRoutes (D:\\Git\\Projects\\raster-catalog-manager\\src\\serverBuilder.ts:34:34)\n    at ServerBuilder.build (D:\\Git\\Projects\\raster-catalog-manager\\src\\serverBuilder.ts:26:10)\n    at Object.init (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\helpers\\recordsRequestSender.ts:11:17)\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:14:19)",
              "TypeError: Cannot read property 'saveMock' of undefined\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:33:52)\n    at Object.asyncJestTest (D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:106:37)\n    at D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-jasmine2\\build\\queueRunner.js:45:12\n    at new Promise (<anonymous>)\n    at mapper (D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-jasmine2\\build\\queueRunner.js:28:19)\n    at D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-jasmine2\\build\\queueRunner.js:75:41\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record with tasks and return status code 201 and the created record and tasks ids",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record with tasks and return status code 201 and the created record and tasks ids"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record with tasks and return status code 201 and the created record and tasks ids\u001b[39m\u001b[22m\n\n    ENOENT: no such file or directory, open './bundeledApi.yaml'\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 17 | \u001b[39m    \u001b[36mconst\u001b[39m openapiConfig \u001b[33m=\u001b[39m config\u001b[33m.\u001b[39mget\u001b[33m<\u001b[39m\u001b[33mIOpenApiConfig\u001b[39m\u001b[33m>\u001b[39m(\u001b[32m'openapiConfig'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 18 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 19 | \u001b[39m    \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mopenapiDoc \u001b[33m=\u001b[39m safeLoad(readFileSync(openapiConfig\u001b[33m.\u001b[39mfilePath\u001b[33m,\u001b[39m \u001b[32m'utf8'\u001b[39m)) as openapiUi\u001b[33m.\u001b[39m\u001b[33mJsonObject\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 20 | \u001b[39m    \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mserveUi \u001b[33m=\u001b[39m openapiUi\u001b[33m.\u001b[39msetup(\u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mopenapiDoc)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 21 | \u001b[39m    \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39muiMiddleware \u001b[33m=\u001b[39m openapiUi\u001b[33m.\u001b[39mserve\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 22 | \u001b[39m  }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new OpenapiController (\u001b[22m\u001b[2msrc/common/controllers/openapi.ts\u001b[2m:19:32)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat InternalDependencyContainer.construct (\u001b[22m\u001b[2mnode_modules/tsyringe/dist/cjs/dependency-container.js\u001b[2m:267:16)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat InternalDependencyContainer.resolve (\u001b[22m\u001b[2mnode_modules/tsyringe/dist/cjs/dependency-container.js\u001b[2m:105:33)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.openapiRouterFactory (\u001b[22m\u001b[2msrc/common/routes/openapi.ts\u001b[2m:8:42)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ServerBuilder.buildRoutes (\u001b[22m\u001b[2msrc/serverBuilder.ts\u001b[2m:34:34)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ServerBuilder.build (\u001b[22m\u001b[2msrc/serverBuilder.ts\u001b[2m:26:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.init (\u001b[22m\u001b[2mtests/integration/records/helpers/recordsRequestSender.ts\u001b[2m:11:17)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:14:19)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record with tasks and return status code 201 and the created record and tasks ids\u001b[39m\u001b[22m\n\n    TypeError: Cannot read property 'saveMock' of undefined\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 31 | \u001b[39m      } as unknown as \u001b[33mRecordEntity\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 32 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 33 | \u001b[39m      \u001b[36mconst\u001b[39m recordSaveMock \u001b[33m=\u001b[39m recordRepositoryMocks\u001b[33m.\u001b[39msaveMock\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 34 | \u001b[39m      recordSaveMock\u001b[33m.\u001b[39mmockResolvedValue(recordEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 35 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:33:52)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1622987330318,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1622987491888,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1622987504735, "runtime": 12099, "slow": true, "start": 1622987492636 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 189,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:38:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:38:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record with tasks and return status code 201 and the created record and tasks ids",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record with tasks and return status code 201 and the created record and tasks ids"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record with tasks and return status code 201 and the created record and tasks ids\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 39 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 40 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 41 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:38:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1622987505193,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1622991355775,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1622991378334, "runtime": 20922, "slow": true, "start": 1622991357412 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 345,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:38:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:38:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record with tasks and return status code 201 and the created record and tasks ids",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record with tasks and return status code 201 and the created record and tasks ids"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record with tasks and return status code 201 and the created record and tasks ids\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 39 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 40 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 41 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:38:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1622991379493,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1622991597245,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1622991612975, "runtime": 13643, "slow": true, "start": 1622991599332 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 743,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 400, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:38:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:38:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record with tasks and return status code 201 and the created record and tasks ids",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record with tasks and return status code 201 and the created record and tasks ids"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record with tasks and return status code 201 and the created record and tasks ids\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 38 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 39 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 40 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 41 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:38:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1622991613550,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623044780864,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623044803097, "runtime": 21318, "slow": true, "start": 1623044781779 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 559,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 400, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:53:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:53:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record with tasks and return status code 201 and the created record and tasks ids",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record with tasks and return status code 201 and the created record and tasks ids"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record with tasks and return status code 201 and the created record and tasks ids\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 51 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 52 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 53 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 54 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 55 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 56 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:53:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623044803676,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623045045067,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623045061788, "runtime": 16014, "slow": true, "start": 1623045045774 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 490,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 400, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:56:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:56:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record with tasks and return status code 201 and the created record and tasks ids",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record with tasks and return status code 201 and the created record and tasks ids"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record with tasks and return status code 201 and the created record and tasks ids\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 54 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 55 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 56 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 57 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 58 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 59 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:56:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623045062303,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623045217687,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623045235244, "runtime": 16748, "slow": true, "start": 1623045218496 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 492,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 400, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:60:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:60:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record with tasks and return status code 201 and the created record and tasks ids",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record with tasks and return status code 201 and the created record and tasks ids"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record with tasks and return status code 201 and the created record and tasks ids\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 58 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 59 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 60 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 61 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 62 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 63 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:60:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623045235730,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623045417248,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623045434347, "runtime": 16388, "slow": true, "start": 1623045417959 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 520,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 400, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:60:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:60:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record with tasks and return status code 201 and the created record and tasks ids",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record with tasks and return status code 201 and the created record and tasks ids"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record with tasks and return status code 201 and the created record and tasks ids\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 58 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 59 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 60 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 61 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 62 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 63 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:60:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623045434893,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623045525488,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623045542768, "runtime": 16515, "slow": true, "start": 1623045526253 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 468,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 400, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:60:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:60:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record with tasks and return status code 201 and the created record and tasks ids",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record with tasks and return status code 201 and the created record and tasks ids"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record with tasks and return status code 201 and the created record and tasks ids\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 58 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 59 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 60 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 61 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 62 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 63 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:60:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623045543287,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623047367097,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623047380237, "runtime": 12318, "slow": true, "start": 1623047367919 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 553,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:60:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:60:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record with tasks and return status code 201 and the created record and tasks ids",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record with tasks and return status code 201 and the created record and tasks ids"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record with tasks and return status code 201 and the created record and tasks ids\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 58 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 59 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 60 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 61 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 62 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 63 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:60:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623047380771,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623048080124,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623048092997, "runtime": 12040, "slow": true, "start": 1623048080957 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 432,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:60:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:60:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record with tasks and return status code 201 and the created record and tasks ids",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record with tasks and return status code 201 and the created record and tasks ids"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record with tasks and return status code 201 and the created record and tasks ids\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 58 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 59 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 60 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 61 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 62 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 63 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:60:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623048093546,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623048282763,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623048295591, "runtime": 12070, "slow": true, "start": 1623048283521 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 546,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:60:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:60:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record with tasks and return status code 201 and the created record and tasks ids",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record with tasks and return status code 201 and the created record and tasks ids"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record with tasks and return status code 201 and the created record and tasks ids\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 58 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 59 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 60 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 61 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 62 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 63 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:60:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623048296137,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623049147877,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623049167649, "runtime": 18832, "slow": true, "start": 1623049148817 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 607,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 400, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:60:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:60:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record with tasks and return status code 201 and the created record and tasks ids",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record with tasks and return status code 201 and the created record and tasks ids"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record with tasks and return status code 201 and the created record and tasks ids\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 58 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 59 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 60 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 61 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 62 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 63 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:60:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623049168242,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623049279524,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623049296862, "runtime": 16582, "slow": true, "start": 1623049280280 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 625,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,8 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[32m-   \"links\": Array [],\u001b[39m\n\u001b[32m-   \"metadata\": Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -23,10 +21,11 @@\u001b[39m\n\u001b[2m        ],\u001b[22m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[31m+   \"links\": \"\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n\u001b[33m@@ -38,7 +37,7 @@\u001b[39m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[32m-   },\u001b[39m\n\u001b[31m+   \"wktGeometry\": \"POLYGON ((Infinity Infinity,-Infinity Infinity,-Infinity -Infinity,Infinity -Infinity,Infinity Infinity))\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,8 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[32m-   \"links\": Array [],\u001b[39m\n\u001b[32m-   \"metadata\": Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -23,10 +21,11 @@\u001b[39m\n\u001b[2m        ],\u001b[22m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[31m+   \"links\": \"\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n\u001b[33m@@ -38,7 +37,7 @@\u001b[39m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[32m-   },\u001b[39m\n\u001b[31m+   \"wktGeometry\": \"POLYGON ((Infinity Infinity,-Infinity Infinity,-Infinity -Infinity,Infinity -Infinity,Infinity Infinity))\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:68:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,8 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[32m-   \"links\": Array [],\u001b[39m\n\u001b[32m-   \"metadata\": Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -23,10 +21,11 @@\u001b[39m\n\u001b[2m        ],\u001b[22m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[31m+   \"links\": \"\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n\u001b[33m@@ -38,7 +37,7 @@\u001b[39m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[32m-   },\u001b[39m\n\u001b[31m+   \"wktGeometry\": \"POLYGON ((Infinity Infinity,-Infinity Infinity,-Infinity -Infinity,Infinity -Infinity,Infinity Infinity))\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:68:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record with tasks and return status code 201 and the created record and tasks ids",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record with tasks and return status code 201 and the created record and tasks ids"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record with tasks and return status code 201 and the created record and tasks ids\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[33m@@ -1,8 +1,6 @@\u001b[39m\n    \u001b[32m- Object {\u001b[39m\n    \u001b[32m-   \"links\": Array [],\u001b[39m\n    \u001b[32m-   \"metadata\": Object {\u001b[39m\n    \u001b[31m+ RecordEntity {\u001b[39m\n    \u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n    \u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"footprint\": Object {\u001b[22m\n    \u001b[2m      \"coordinates\": Array [\u001b[22m\n    \u001b[2m        Array [\u001b[22m\n    \u001b[33m@@ -23,10 +21,11 @@\u001b[39m\n    \u001b[2m        ],\u001b[22m\n    \u001b[2m      ],\u001b[22m\n    \u001b[2m      \"type\": \"Polygon\",\u001b[22m\n    \u001b[2m    },\u001b[22m\n    \u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[31m+   \"links\": \"\",\u001b[39m\n    \u001b[2m    \"producerName\": \"test\",\u001b[22m\n    \u001b[2m    \"productId\": \"testId\",\u001b[22m\n    \u001b[2m    \"productName\": \"testName\",\u001b[22m\n    \u001b[2m    \"productType\": \"raster\",\u001b[22m\n    \u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n    \u001b[33m@@ -38,7 +37,7 @@\u001b[39m\n    \u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n    \u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n    \u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n    \u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[32m-   },\u001b[39m\n    \u001b[31m+   \"wktGeometry\": \"POLYGON ((Infinity Infinity,-Infinity Infinity,-Infinity -Infinity,Infinity -Infinity,Infinity Infinity))\",\u001b[39m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 66 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 67 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 68 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 70 | \u001b[39m      \u001b[36mconst\u001b[39m body \u001b[33m=\u001b[39m response\u001b[33m.\u001b[39mbody as unknown\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 71 | \u001b[39m      expect(body)\u001b[33m.\u001b[39mtoEqual({ id\u001b[33m:\u001b[39m \u001b[32m'recordId'\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:68:30)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623049297639,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623050076054,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623050093901, "runtime": 17115, "slow": true, "start": 1623050076786 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 534,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,8 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[32m-   \"links\": Array [],\u001b[39m\n\u001b[32m-   \"metadata\": Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -25,10 +23,11 @@\u001b[39m\n\u001b[2m        ],\u001b[22m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[31m+   \"links\": \"\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n\u001b[33m@@ -40,7 +39,7 @@\u001b[39m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[32m-   },\u001b[39m\n\u001b[31m+   \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,8 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[32m-   \"links\": Array [],\u001b[39m\n\u001b[32m-   \"metadata\": Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -25,10 +23,11 @@\u001b[39m\n\u001b[2m        ],\u001b[22m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[31m+   \"links\": \"\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n\u001b[33m@@ -40,7 +39,7 @@\u001b[39m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[32m-   },\u001b[39m\n\u001b[31m+   \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:70:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,8 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[32m-   \"links\": Array [],\u001b[39m\n\u001b[32m-   \"metadata\": Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -25,10 +23,11 @@\u001b[39m\n\u001b[2m        ],\u001b[22m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[31m+   \"links\": \"\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n\u001b[33m@@ -40,7 +39,7 @@\u001b[39m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[32m-   },\u001b[39m\n\u001b[31m+   \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:70:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record with tasks and return status code 201 and the created record and tasks ids",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record with tasks and return status code 201 and the created record and tasks ids"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record with tasks and return status code 201 and the created record and tasks ids\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[33m@@ -1,8 +1,6 @@\u001b[39m\n    \u001b[32m- Object {\u001b[39m\n    \u001b[32m-   \"links\": Array [],\u001b[39m\n    \u001b[32m-   \"metadata\": Object {\u001b[39m\n    \u001b[31m+ RecordEntity {\u001b[39m\n    \u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n    \u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"footprint\": Object {\u001b[22m\n    \u001b[2m      \"coordinates\": Array [\u001b[22m\n    \u001b[2m        Array [\u001b[22m\n    \u001b[33m@@ -25,10 +23,11 @@\u001b[39m\n    \u001b[2m        ],\u001b[22m\n    \u001b[2m      ],\u001b[22m\n    \u001b[2m      \"type\": \"Polygon\",\u001b[22m\n    \u001b[2m    },\u001b[22m\n    \u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[31m+   \"links\": \"\",\u001b[39m\n    \u001b[2m    \"producerName\": \"test\",\u001b[22m\n    \u001b[2m    \"productId\": \"testId\",\u001b[22m\n    \u001b[2m    \"productName\": \"testName\",\u001b[22m\n    \u001b[2m    \"productType\": \"raster\",\u001b[22m\n    \u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n    \u001b[33m@@ -40,7 +39,7 @@\u001b[39m\n    \u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n    \u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n    \u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n    \u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[32m-   },\u001b[39m\n    \u001b[31m+   \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[39m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 68 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 70 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(createRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 71 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 72 | \u001b[39m      \u001b[36mconst\u001b[39m body \u001b[33m=\u001b[39m response\u001b[33m.\u001b[39mbody as unknown\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 73 | \u001b[39m      expect(body)\u001b[33m.\u001b[39mtoEqual({ id\u001b[33m:\u001b[39m \u001b[32m'recordId'\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:70:30)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623050094419,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 1,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623051191468,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 1,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623051210641, "runtime": 18333, "slow": true, "start": 1623051192308 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 571,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record with tasks and return status code 201 and the created record and tasks ids",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record with tasks and return status code 201 and the created record and tasks ids"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623051211251,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623051939971,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623051959000, "runtime": 17761, "slow": true, "start": 1623051941239 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 527,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -23,11 +23,11 @@\u001b[39m\n\u001b[2m        ],\u001b[22m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[32m-   \"links\": \",,test,http://test.test/wmts^testLink,test test test test,fulltest,http://test.test/wms\",\u001b[39m\n\u001b[31m+   \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -23,11 +23,11 @@\u001b[39m\n\u001b[2m        ],\u001b[22m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[32m-   \"links\": \",,test,http://test.test/wmts^testLink,test test test test,fulltest,http://test.test/wms\",\u001b[39m\n\u001b[31m+   \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:91:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -23,11 +23,11 @@\u001b[39m\n\u001b[2m        ],\u001b[22m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[32m-   \"links\": \",,test,http://test.test/wmts^testLink,test test test test,fulltest,http://test.test/wms\",\u001b[39m\n\u001b[31m+   \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:91:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record with tasks and return status code 201 and the created record and tasks ids",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record with tasks and return status code 201 and the created record and tasks ids"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record with tasks and return status code 201 and the created record and tasks ids\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n    \u001b[32m- Object {\u001b[39m\n    \u001b[31m+ RecordEntity {\u001b[39m\n    \u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n    \u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"footprint\": Object {\u001b[22m\n    \u001b[2m      \"coordinates\": Array [\u001b[22m\n    \u001b[2m        Array [\u001b[22m\n    \u001b[33m@@ -23,11 +23,11 @@\u001b[39m\n    \u001b[2m        ],\u001b[22m\n    \u001b[2m      ],\u001b[22m\n    \u001b[2m      \"type\": \"Polygon\",\u001b[22m\n    \u001b[2m    },\u001b[22m\n    \u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[32m-   \"links\": \",,test,http://test.test/wmts^testLink,test test test test,fulltest,http://test.test/wms\",\u001b[39m\n    \u001b[31m+   \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[39m\n    \u001b[2m    \"producerName\": \"test\",\u001b[22m\n    \u001b[2m    \"productId\": \"testId\",\u001b[22m\n    \u001b[2m    \"productName\": \"testName\",\u001b[22m\n    \u001b[2m    \"productType\": \"raster\",\u001b[22m\n    \u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 89 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 90 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 91 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 92 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 93 | \u001b[39m      \u001b[36mconst\u001b[39m body \u001b[33m=\u001b[39m response\u001b[33m.\u001b[39mbody as unknown\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 94 | \u001b[39m      expect(body)\u001b[33m.\u001b[39mtoEqual({ id\u001b[33m:\u001b[39m \u001b[32m'recordId'\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:91:30)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623051959609,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623052061418,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623052078958, "runtime": 16615, "slow": true, "start": 1623052062343 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 473,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -23,11 +23,11 @@\u001b[39m\n\u001b[2m        ],\u001b[22m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[32m-   \"links\": \",,test,http://test.test/wmts^testLink,test test test test,fulltest,http://test.test/wms\",\u001b[39m\n\u001b[31m+   \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -23,11 +23,11 @@\u001b[39m\n\u001b[2m        ],\u001b[22m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[32m-   \"links\": \",,test,http://test.test/wmts^testLink,test test test test,fulltest,http://test.test/wms\",\u001b[39m\n\u001b[31m+   \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:91:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -23,11 +23,11 @@\u001b[39m\n\u001b[2m        ],\u001b[22m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[32m-   \"links\": \",,test,http://test.test/wmts^testLink,test test test test,fulltest,http://test.test/wms\",\u001b[39m\n\u001b[31m+   \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:91:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n    \u001b[32m- Object {\u001b[39m\n    \u001b[31m+ RecordEntity {\u001b[39m\n    \u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n    \u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"footprint\": Object {\u001b[22m\n    \u001b[2m      \"coordinates\": Array [\u001b[22m\n    \u001b[2m        Array [\u001b[22m\n    \u001b[33m@@ -23,11 +23,11 @@\u001b[39m\n    \u001b[2m        ],\u001b[22m\n    \u001b[2m      ],\u001b[22m\n    \u001b[2m      \"type\": \"Polygon\",\u001b[22m\n    \u001b[2m    },\u001b[22m\n    \u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[32m-   \"links\": \",,test,http://test.test/wmts^testLink,test test test test,fulltest,http://test.test/wms\",\u001b[39m\n    \u001b[31m+   \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[39m\n    \u001b[2m    \"producerName\": \"test\",\u001b[22m\n    \u001b[2m    \"productId\": \"testId\",\u001b[22m\n    \u001b[2m    \"productName\": \"testName\",\u001b[22m\n    \u001b[2m    \"productType\": \"raster\",\u001b[22m\n    \u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 89 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 90 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 91 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 92 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 93 | \u001b[39m      \u001b[36mconst\u001b[39m body \u001b[33m=\u001b[39m response\u001b[33m.\u001b[39mbody as unknown\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 94 | \u001b[39m      expect(body)\u001b[33m.\u001b[39mtoEqual({ id\u001b[33m:\u001b[39m \u001b[32m'recordId'\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:91:30)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623052079445,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 1,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 1,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623052497906,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 1,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623052515100, "runtime": 16318, "slow": true, "start": 1623052498782 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 547,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623052515638,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 1,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 2,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623053496156,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 1,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623053516367, "runtime": 19276, "slow": true, "start": 1623053497091 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 526,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 220,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 400, "expected": 200, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:112:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:112:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should update record status and return 200"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should update record status and return 200\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mupdateResource(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m testUpdateRecordRequest)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 112 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 113 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 114 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 115 | \u001b[39m        \u001b[33m...\u001b[39mtestUpdateRecordRequest\u001b[33m.\u001b[39mmetadata\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:112:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623053516963,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 2,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 2,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623054937663,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 2,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623054950569, "runtime": 12130, "slow": true, "start": 1623054938439 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 350,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:95:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:95:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 51,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 200, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:112:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:112:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should update record status and return 200"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 93 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(testCreateRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 94 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 95 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 96 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 97 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 98 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:95:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should update record status and return 200\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mupdateResource(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m testUpdateRecordRequest)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 112 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 113 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 114 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 115 | \u001b[39m        \u001b[33m...\u001b[39mtestUpdateRecordRequest\u001b[33m.\u001b[39mmetadata\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:112:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623054951202,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 2,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 2,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623055227096,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 2,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623055239945, "runtime": 12052, "slow": true, "start": 1623055227893 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 350,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:95:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:95:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 53,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 200, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:112:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:112:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should update record status and return 200"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 93 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(testCreateRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 94 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 95 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 96 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 97 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 98 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:95:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should update record status and return 200\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mupdateResource(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m testUpdateRecordRequest)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 112 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 113 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 114 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 115 | \u001b[39m        \u001b[33m...\u001b[39mtestUpdateRecordRequest\u001b[33m.\u001b[39mmetadata\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:112:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623055240683,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 2,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 2,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623055766756,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 2,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623055780292, "runtime": 12696, "slow": true, "start": 1623055767596 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 334,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:95:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:95:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 35,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 200, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:112:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:112:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should update record status and return 200"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 93 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(testCreateRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 94 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 95 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 96 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 97 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 98 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:95:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should update record status and return 200\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mupdateResource(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m testUpdateRecordRequest)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 112 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 113 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 114 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 115 | \u001b[39m        \u001b[33m...\u001b[39mtestUpdateRecordRequest\u001b[33m.\u001b[39mmetadata\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:112:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623055780901,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 2,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 2,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623056018865,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 2,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623056032130, "runtime": 12437, "slow": true, "start": 1623056019693 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 388,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:95:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:95:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 52,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 200, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:112:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:112:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should update record status and return 200"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 93 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(testCreateRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 94 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 95 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 96 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 97 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 98 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:95:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should update record status and return 200\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mupdateResource(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m testUpdateRecordRequest)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 112 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 113 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 114 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 115 | \u001b[39m        \u001b[33m...\u001b[39mtestUpdateRecordRequest\u001b[33m.\u001b[39mmetadata\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:112:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623056032783,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 1,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 2,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623059909999,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 1,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623059924700, "runtime": 13891, "slow": true, "start": 1623059910809 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 748,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 210,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n\u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n\u001b[31m+   \"id\": undefined,\u001b[39m\n\u001b[31m+   \"producerName\": \"IDFMU\",\u001b[39m\n\u001b[31m+   \"type\": \"RECORD_RASTER\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n\u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n\u001b[31m+   \"id\": undefined,\u001b[39m\n\u001b[31m+   \"producerName\": \"IDFMU\",\u001b[39m\n\u001b[31m+   \"type\": \"RECORD_RASTER\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:114:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n\u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n\u001b[31m+   \"id\": undefined,\u001b[39m\n\u001b[31m+   \"producerName\": \"IDFMU\",\u001b[39m\n\u001b[31m+   \"type\": \"RECORD_RASTER\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:114:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should update record status and return 200"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should update record status and return 200\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[32m- Object {\u001b[39m\n    \u001b[31m+ RecordEntity {\u001b[39m\n    \u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n    \u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n    \u001b[31m+   \"id\": undefined,\u001b[39m\n    \u001b[31m+   \"producerName\": \"IDFMU\",\u001b[39m\n    \u001b[31m+   \"type\": \"RECORD_RASTER\",\u001b[39m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 112 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 113 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 114 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 115 | \u001b[39m        \u001b[33m...\u001b[39mtestUpdateRecordRequest\u001b[33m.\u001b[39mmetadata\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 116 | \u001b[39m        id\u001b[33m:\u001b[39m \u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 117 | \u001b[39m      })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:114:30)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623059925373,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 1,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 2,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623061919099,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 1,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623061936683, "runtime": 16828, "slow": true, "start": 1623061919855 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 500,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 166,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n\u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n\u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:114:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n\u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:114:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should update record status and return 200"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should update record status and return 200\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[2m  Object {\u001b[22m\n    \u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n    \u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 112 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 113 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 114 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 115 | \u001b[39m        \u001b[33m...\u001b[39mtestUpdateRecordRequest\u001b[33m.\u001b[39mmetadata\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 116 | \u001b[39m        id\u001b[33m:\u001b[39m \u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 117 | \u001b[39m      })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:114:30)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623061937203,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 1,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 2,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623062078372,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 1,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623062098145, "runtime": 19091, "slow": true, "start": 1623062079054 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 466,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 155,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n\u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n\u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:114:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n\u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:114:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should update record status and return 200"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should update record status and return 200\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[2m  Object {\u001b[22m\n    \u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n    \u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 112 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 113 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 114 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 115 | \u001b[39m        \u001b[33m...\u001b[39mtestUpdateRecordRequest\u001b[33m.\u001b[39mmetadata\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 116 | \u001b[39m        id\u001b[33m:\u001b[39m \u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 117 | \u001b[39m      })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:114:30)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623062098570,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 1,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 2,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623062366061,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 1,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623062383838, "runtime": 17004, "slow": true, "start": 1623062366834 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 507,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 199,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n\u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n\u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:114:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n\u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:114:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should update record status and return 200"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should update record status and return 200\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[2m  Object {\u001b[22m\n    \u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n    \u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 112 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 113 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 114 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 115 | \u001b[39m        \u001b[33m...\u001b[39mtestUpdateRecordRequest\u001b[33m.\u001b[39mmetadata\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 116 | \u001b[39m        id\u001b[33m:\u001b[39m \u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 117 | \u001b[39m      })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:114:30)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623062384296,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 1,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 2,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623062489826,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 1,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623062507667, "runtime": 17033, "slow": true, "start": 1623062490634 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 482,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 203,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n\u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n\u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:114:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n\u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:114:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should update record status and return 200"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should update record status and return 200\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[2m  Object {\u001b[22m\n    \u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n    \u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 112 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 113 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 114 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 115 | \u001b[39m        \u001b[33m...\u001b[39mtestUpdateRecordRequest\u001b[33m.\u001b[39mmetadata\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 116 | \u001b[39m        id\u001b[33m:\u001b[39m \u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 117 | \u001b[39m      })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:114:30)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623062508137,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 1,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 2,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623063200155,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 1,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623063220271, "runtime": 19347, "slow": true, "start": 1623063200924 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 488,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 171,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n\u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n\u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:114:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n\u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:114:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should update record status and return 200"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should update record status and return 200\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[2m  Object {\u001b[22m\n    \u001b[2m    \"accuracyCE90\": 0.95678,\u001b[22m\n    \u001b[32m-   \"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\",\u001b[39m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 112 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 113 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 114 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 115 | \u001b[39m        \u001b[33m...\u001b[39mtestUpdateRecordRequest\u001b[33m.\u001b[39mmetadata\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 116 | \u001b[39m        id\u001b[33m:\u001b[39m \u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 117 | \u001b[39m      })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:114:30)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623063220822,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 2,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 2,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623063363757,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 2,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623063380639, "runtime": 16146, "slow": true, "start": 1623063364493 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 504,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 195,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623063381168,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 3,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 3,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623063751531,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 3,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623063772340, "runtime": 19816, "slow": true, "start": 1623063752524 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 619,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 185,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 130,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record without tasks and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record without tasks and return 200"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623063773007,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 3,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 4,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623063946230,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 3,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623063964184, "runtime": 17051, "slow": true, "start": 1623063947133 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 484,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 144,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 106,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 97,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32m\"170dd8c0-8bad-498b-bb26-671dcf19aa3c\"\u001b[39m\nReceived: \u001b[31m{\"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\"}\u001b[39m\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32m\"170dd8c0-8bad-498b-bb26-671dcf19aa3c\"\u001b[39m\nReceived: \u001b[31m{\"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\"}\u001b[39m\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:141:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32m\"170dd8c0-8bad-498b-bb26-671dcf19aa3c\"\u001b[39m\nReceived: \u001b[31m{\"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\"}\u001b[39m\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:141:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should return 200 and true when record exists"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should return 200 and true when record exists\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32m\"170dd8c0-8bad-498b-bb26-671dcf19aa3c\"\u001b[39m\n    Received: \u001b[31m{\"id\": \"170dd8c0-8bad-498b-bb26-671dcf19aa3c\"}\u001b[39m\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 139 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 140 | \u001b[39m      expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 141 | \u001b[39m      expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 142 | \u001b[39m      expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoBe({ exists\u001b[33m:\u001b[39m \u001b[36mtrue\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 143 | \u001b[39m    })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 144 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:141:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623063964733,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 3,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 4,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623064136741,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 3,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623064155863, "runtime": 18368, "slow": true, "start": 1623064137495 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 516,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 171,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 114,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 104,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": { "exists": true }, "expected": { "exists": true }, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n\u001b[2mIf it should pass with deep equality, replace \"toBe\" with \"toStrictEqual\"\u001b[22m\n\nExpected: \u001b[32m{\"exists\": true}\u001b[39m\nReceived: serializes to the same string",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n\u001b[2mIf it should pass with deep equality, replace \"toBe\" with \"toStrictEqual\"\u001b[22m\n\nExpected: \u001b[32m{\"exists\": true}\u001b[39m\nReceived: serializes to the same string\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:142:29)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n\u001b[2mIf it should pass with deep equality, replace \"toBe\" with \"toStrictEqual\"\u001b[22m\n\nExpected: \u001b[32m{\"exists\": true}\u001b[39m\nReceived: serializes to the same string\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:142:29)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should return 200 and true when record exists"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should return 200 and true when record exists\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    \u001b[2mIf it should pass with deep equality, replace \"toBe\" with \"toStrictEqual\"\u001b[22m\n\n    Expected: \u001b[32m{\"exists\": true}\u001b[39m\n    Received: serializes to the same string\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 140 | \u001b[39m      expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 141 | \u001b[39m      expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({ id\u001b[33m:\u001b[39m \u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 142 | \u001b[39m      expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoBe({ exists\u001b[33m:\u001b[39m \u001b[36mtrue\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 143 | \u001b[39m    })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 144 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 145 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:142:29)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623064156441,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 4,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 4,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623064247471,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 4,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623064264147, "runtime": 15889, "slow": true, "start": 1623064248258 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 488,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 146,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 91,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623064264667,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 5,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 5,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623064366154,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 5,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623064382690, "runtime": 15850, "slow": true, "start": 1623064366840 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 508,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 163,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 129,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 108,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 115,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record doesn't exists"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623064383205,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 8,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 8,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623065079018,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 8,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623065096433, "runtime": 16634, "slow": true, "start": 1623065079799 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 483,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 175,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 124,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 110,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 136,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 156,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 141,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 120,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623065096936,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 10,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623066015309,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 10,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623066034065, "runtime": 18057, "slow": true, "start": 1623066016008 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 555,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 139,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 86,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 91,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 84,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 143,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 109,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 103,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 107,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 94,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623066034602,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 10,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623067388310,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 10,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623067409027, "runtime": 19793, "slow": true, "start": 1623067389234 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 348,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 195,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 104,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 78,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 75,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 228,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 114,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 87,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 86,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 72,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623067409760,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 10,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623069894961,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 10,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623069910204, "runtime": 14471, "slow": true, "start": 1623069895733 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 444,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 199,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 144,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 107,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 110,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 270,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 139,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 110,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 104,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 85,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623069910782,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 10,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623130478722,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 10,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623130499415, "runtime": 19861, "slow": true, "start": 1623130479554 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 431,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 137,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 90,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 80,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 78,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 243,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 101,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 90,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 76,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623130500067,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 10,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623132514433,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 10,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623132543512, "runtime": 27553, "slow": true, "start": 1623132515959 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 633,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 227,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 102,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 106,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 122,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 111,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 167,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 122,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 107,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623132544528,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 10,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623223162300,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 10,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623223180974, "runtime": 17944, "slow": true, "start": 1623223163030 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 323,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 131,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 107,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 91,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 108,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 83,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 122,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 101,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 72,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 72,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623223181537,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 10,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623669993677,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 10,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623670013072, "runtime": 18622, "slow": true, "start": 1623669994450 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 378,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 123,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 106,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 75,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 70,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 70,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 91,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 87,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 68,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 65,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623670013799,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 9,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623739720378,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 9,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623739742603, "runtime": 21353, "slow": true, "start": 1623739721250 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 477,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 400, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:97:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:97:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 145,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 79,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 78,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 82,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 118,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 90,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 68,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 73,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  95 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(testCreateRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  96 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m  97 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  98 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  99 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 100 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:97:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623739743512,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 9,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623739900302,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 9,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623739917877, "runtime": 16644, "slow": true, "start": 1623739901233 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 350,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 400, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:97:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:97:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 150,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 87,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 79,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 88,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 88,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 116,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 77,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 66,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 78,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  95 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(testCreateRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  96 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m  97 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  98 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  99 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 100 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:97:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623739918443,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 9,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623740114805,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 9,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623740132513, "runtime": 16860, "slow": true, "start": 1623740115653 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 385,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 400, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:97:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:97:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  95 | \u001b[39m      \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m await requestSender\u001b[33m.\u001b[39mcreateResource(testCreateRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  96 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m  97 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  98 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  99 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 100 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:97:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623740133143,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 9,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623740442492,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 9,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623740459376, "runtime": 16013, "slow": true, "start": 1623740443363 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 323,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -24,25 +24,29 @@\u001b[39m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[22m\n\u001b[31m+   \"mdSource\": \"\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n\u001b[2m    \"region\": \"a\",\u001b[22m\n\u001b[2m    \"resolution\": 0.5,\u001b[22m\n\u001b[2m    \"rms\": 0.444,\u001b[22m\n\u001b[2m    \"scale\": \"1:9\",\u001b[22m\n\u001b[31m+   \"schema\": \"mc_raster\",\u001b[39m\n\u001b[2m    \"sensorType\": Array [\u001b[22m\n\u001b[2m      \"Pan_Sharpen\",\u001b[22m\n\u001b[2m    ],\u001b[22m\n\u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[31m+   \"typeName\": \"mc:MCRasterRecord\",\u001b[39m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[22m\n\u001b[31m+   \"xml\": \"\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -24,25 +24,29 @@\u001b[39m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[22m\n\u001b[31m+   \"mdSource\": \"\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n\u001b[2m    \"region\": \"a\",\u001b[22m\n\u001b[2m    \"resolution\": 0.5,\u001b[22m\n\u001b[2m    \"rms\": 0.444,\u001b[22m\n\u001b[2m    \"scale\": \"1:9\",\u001b[22m\n\u001b[31m+   \"schema\": \"mc_raster\",\u001b[39m\n\u001b[2m    \"sensorType\": Array [\u001b[22m\n\u001b[2m      \"Pan_Sharpen\",\u001b[22m\n\u001b[2m    ],\u001b[22m\n\u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[31m+   \"typeName\": \"mc:MCRasterRecord\",\u001b[39m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[22m\n\u001b[31m+   \"xml\": \"\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:100:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -24,25 +24,29 @@\u001b[39m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[22m\n\u001b[31m+   \"mdSource\": \"\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n\u001b[2m    \"region\": \"a\",\u001b[22m\n\u001b[2m    \"resolution\": 0.5,\u001b[22m\n\u001b[2m    \"rms\": 0.444,\u001b[22m\n\u001b[2m    \"scale\": \"1:9\",\u001b[22m\n\u001b[31m+   \"schema\": \"mc_raster\",\u001b[39m\n\u001b[2m    \"sensorType\": Array [\u001b[22m\n\u001b[2m      \"Pan_Sharpen\",\u001b[22m\n\u001b[2m    ],\u001b[22m\n\u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[31m+   \"typeName\": \"mc:MCRasterRecord\",\u001b[39m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[22m\n\u001b[31m+   \"xml\": \"\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:100:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n    \u001b[32m- Object {\u001b[39m\n    \u001b[31m+ RecordEntity {\u001b[39m\n    \u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n    \u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"footprint\": Object {\u001b[22m\n    \u001b[2m      \"coordinates\": Array [\u001b[22m\n    \u001b[2m        Array [\u001b[22m\n    \u001b[33m@@ -24,25 +24,29 @@\u001b[39m\n    \u001b[2m      ],\u001b[22m\n    \u001b[2m      \"type\": \"Polygon\",\u001b[22m\n    \u001b[2m    },\u001b[22m\n    \u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[22m\n    \u001b[31m+   \"mdSource\": \"\",\u001b[39m\n    \u001b[2m    \"producerName\": \"test\",\u001b[22m\n    \u001b[2m    \"productId\": \"testId\",\u001b[22m\n    \u001b[2m    \"productName\": \"testName\",\u001b[22m\n    \u001b[2m    \"productType\": \"raster\",\u001b[22m\n    \u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n    \u001b[2m    \"region\": \"a\",\u001b[22m\n    \u001b[2m    \"resolution\": 0.5,\u001b[22m\n    \u001b[2m    \"rms\": 0.444,\u001b[22m\n    \u001b[2m    \"scale\": \"1:9\",\u001b[22m\n    \u001b[31m+   \"schema\": \"mc_raster\",\u001b[39m\n    \u001b[2m    \"sensorType\": Array [\u001b[22m\n    \u001b[2m      \"Pan_Sharpen\",\u001b[22m\n    \u001b[2m    ],\u001b[22m\n    \u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n    \u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n    \u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n    \u001b[31m+   \"typeName\": \"mc:MCRasterRecord\",\u001b[39m\n    \u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[22m\n    \u001b[31m+   \"xml\": \"\",\u001b[39m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  98 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  99 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 100 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 101 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 102 | \u001b[39m      \u001b[36mconst\u001b[39m body \u001b[33m=\u001b[39m response\u001b[33m.\u001b[39mbody as unknown\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 103 | \u001b[39m      expect(body)\u001b[33m.\u001b[39mtoEqual({ id\u001b[33m:\u001b[39m \u001b[32m'recordId'\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:100:30)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623740459904,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 9,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623740677187,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 9,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623740694173, "runtime": 16101, "slow": true, "start": 1623740678072 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 342,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -24,25 +24,29 @@\u001b[39m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[22m\n\u001b[31m+   \"mdSource\": \"\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n\u001b[2m    \"region\": \"a\",\u001b[22m\n\u001b[2m    \"resolution\": 0.5,\u001b[22m\n\u001b[2m    \"rms\": 0.444,\u001b[22m\n\u001b[2m    \"scale\": \"1:9\",\u001b[22m\n\u001b[31m+   \"schema\": \"mc_raster\",\u001b[39m\n\u001b[2m    \"sensorType\": Array [\u001b[22m\n\u001b[2m      \"Pan_Sharpen\",\u001b[22m\n\u001b[2m    ],\u001b[22m\n\u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[31m+   \"typeName\": \"mc:MCRasterRecord\",\u001b[39m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[22m\n\u001b[31m+   \"xml\": \"\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -24,25 +24,29 @@\u001b[39m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[22m\n\u001b[31m+   \"mdSource\": \"\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n\u001b[2m    \"region\": \"a\",\u001b[22m\n\u001b[2m    \"resolution\": 0.5,\u001b[22m\n\u001b[2m    \"rms\": 0.444,\u001b[22m\n\u001b[2m    \"scale\": \"1:9\",\u001b[22m\n\u001b[31m+   \"schema\": \"mc_raster\",\u001b[39m\n\u001b[2m    \"sensorType\": Array [\u001b[22m\n\u001b[2m      \"Pan_Sharpen\",\u001b[22m\n\u001b[2m    ],\u001b[22m\n\u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[31m+   \"typeName\": \"mc:MCRasterRecord\",\u001b[39m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[22m\n\u001b[31m+   \"xml\": \"\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:104:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -24,25 +24,29 @@\u001b[39m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[22m\n\u001b[31m+   \"mdSource\": \"\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n\u001b[2m    \"region\": \"a\",\u001b[22m\n\u001b[2m    \"resolution\": 0.5,\u001b[22m\n\u001b[2m    \"rms\": 0.444,\u001b[22m\n\u001b[2m    \"scale\": \"1:9\",\u001b[22m\n\u001b[31m+   \"schema\": \"mc_raster\",\u001b[39m\n\u001b[2m    \"sensorType\": Array [\u001b[22m\n\u001b[2m      \"Pan_Sharpen\",\u001b[22m\n\u001b[2m    ],\u001b[22m\n\u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[31m+   \"typeName\": \"mc:MCRasterRecord\",\u001b[39m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[22m\n\u001b[31m+   \"xml\": \"\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:104:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n    \u001b[32m- Object {\u001b[39m\n    \u001b[31m+ RecordEntity {\u001b[39m\n    \u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n    \u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"footprint\": Object {\u001b[22m\n    \u001b[2m      \"coordinates\": Array [\u001b[22m\n    \u001b[2m        Array [\u001b[22m\n    \u001b[33m@@ -24,25 +24,29 @@\u001b[39m\n    \u001b[2m      ],\u001b[22m\n    \u001b[2m      \"type\": \"Polygon\",\u001b[22m\n    \u001b[2m    },\u001b[22m\n    \u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[22m\n    \u001b[31m+   \"mdSource\": \"\",\u001b[39m\n    \u001b[2m    \"producerName\": \"test\",\u001b[22m\n    \u001b[2m    \"productId\": \"testId\",\u001b[22m\n    \u001b[2m    \"productName\": \"testName\",\u001b[22m\n    \u001b[2m    \"productType\": \"raster\",\u001b[22m\n    \u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n    \u001b[2m    \"region\": \"a\",\u001b[22m\n    \u001b[2m    \"resolution\": 0.5,\u001b[22m\n    \u001b[2m    \"rms\": 0.444,\u001b[22m\n    \u001b[2m    \"scale\": \"1:9\",\u001b[22m\n    \u001b[31m+   \"schema\": \"mc_raster\",\u001b[39m\n    \u001b[2m    \"sensorType\": Array [\u001b[22m\n    \u001b[2m      \"Pan_Sharpen\",\u001b[22m\n    \u001b[2m    ],\u001b[22m\n    \u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n    \u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n    \u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n    \u001b[31m+   \"typeName\": \"mc:MCRasterRecord\",\u001b[39m\n    \u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[22m\n    \u001b[31m+   \"xml\": \"\",\u001b[39m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 102 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 103 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 104 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 105 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 106 | \u001b[39m      \u001b[36mconst\u001b[39m body \u001b[33m=\u001b[39m response\u001b[33m.\u001b[39mbody as unknown\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 | \u001b[39m      expect(body)\u001b[33m.\u001b[39mtoEqual({ id\u001b[33m:\u001b[39m \u001b[32m'recordId'\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:104:30)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623740694714,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 9,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623741095738,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 9,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623741110771, "runtime": 14137, "slow": true, "start": 1623741096634 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 379,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -24,25 +24,29 @@\u001b[39m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[22m\n\u001b[31m+   \"mdSource\": \"\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n\u001b[2m    \"region\": \"a\",\u001b[22m\n\u001b[2m    \"resolution\": 0.5,\u001b[22m\n\u001b[2m    \"rms\": 0.444,\u001b[22m\n\u001b[2m    \"scale\": \"1:9\",\u001b[22m\n\u001b[31m+   \"schema\": \"mc_raster\",\u001b[39m\n\u001b[2m    \"sensorType\": Array [\u001b[22m\n\u001b[2m      \"Pan_Sharpen\",\u001b[22m\n\u001b[2m    ],\u001b[22m\n\u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[31m+   \"typeName\": \"mc:MCRasterRecord\",\u001b[39m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[22m\n\u001b[31m+   \"xml\": \"\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -24,25 +24,29 @@\u001b[39m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[22m\n\u001b[31m+   \"mdSource\": \"\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n\u001b[2m    \"region\": \"a\",\u001b[22m\n\u001b[2m    \"resolution\": 0.5,\u001b[22m\n\u001b[2m    \"rms\": 0.444,\u001b[22m\n\u001b[2m    \"scale\": \"1:9\",\u001b[22m\n\u001b[31m+   \"schema\": \"mc_raster\",\u001b[39m\n\u001b[2m    \"sensorType\": Array [\u001b[22m\n\u001b[2m      \"Pan_Sharpen\",\u001b[22m\n\u001b[2m    ],\u001b[22m\n\u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[31m+   \"typeName\": \"mc:MCRasterRecord\",\u001b[39m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[22m\n\u001b[31m+   \"xml\": \"\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:104:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -24,25 +24,29 @@\u001b[39m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[22m\n\u001b[31m+   \"mdSource\": \"\",\u001b[39m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m\n\u001b[2m    \"productName\": \"testName\",\u001b[22m\n\u001b[2m    \"productType\": \"raster\",\u001b[22m\n\u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n\u001b[2m    \"region\": \"a\",\u001b[22m\n\u001b[2m    \"resolution\": 0.5,\u001b[22m\n\u001b[2m    \"rms\": 0.444,\u001b[22m\n\u001b[2m    \"scale\": \"1:9\",\u001b[22m\n\u001b[31m+   \"schema\": \"mc_raster\",\u001b[39m\n\u001b[2m    \"sensorType\": Array [\u001b[22m\n\u001b[2m      \"Pan_Sharpen\",\u001b[22m\n\u001b[2m    ],\u001b[22m\n\u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[31m+   \"typeName\": \"mc:MCRasterRecord\",\u001b[39m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[22m\n\u001b[31m+   \"xml\": \"\",\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:104:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n    \u001b[32m- Object {\u001b[39m\n    \u001b[31m+ RecordEntity {\u001b[39m\n    \u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n    \u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"footprint\": Object {\u001b[22m\n    \u001b[2m      \"coordinates\": Array [\u001b[22m\n    \u001b[2m        Array [\u001b[22m\n    \u001b[33m@@ -24,25 +24,29 @@\u001b[39m\n    \u001b[2m      ],\u001b[22m\n    \u001b[2m      \"type\": \"Polygon\",\u001b[22m\n    \u001b[2m    },\u001b[22m\n    \u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[22m\n    \u001b[31m+   \"mdSource\": \"\",\u001b[39m\n    \u001b[2m    \"producerName\": \"test\",\u001b[22m\n    \u001b[2m    \"productId\": \"testId\",\u001b[22m\n    \u001b[2m    \"productName\": \"testName\",\u001b[22m\n    \u001b[2m    \"productType\": \"raster\",\u001b[22m\n    \u001b[2m    \"productVersion\": \"testVersion\",\u001b[22m\n    \u001b[2m    \"region\": \"a\",\u001b[22m\n    \u001b[2m    \"resolution\": 0.5,\u001b[22m\n    \u001b[2m    \"rms\": 0.444,\u001b[22m\n    \u001b[2m    \"scale\": \"1:9\",\u001b[22m\n    \u001b[31m+   \"schema\": \"mc_raster\",\u001b[39m\n    \u001b[2m    \"sensorType\": Array [\u001b[22m\n    \u001b[2m      \"Pan_Sharpen\",\u001b[22m\n    \u001b[2m    ],\u001b[22m\n    \u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n    \u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n    \u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n    \u001b[31m+   \"typeName\": \"mc:MCRasterRecord\",\u001b[39m\n    \u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[22m\n    \u001b[31m+   \"xml\": \"\",\u001b[39m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 102 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 103 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 104 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 105 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 106 | \u001b[39m      \u001b[36mconst\u001b[39m body \u001b[33m=\u001b[39m response\u001b[33m.\u001b[39mbody as unknown\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 | \u001b[39m      expect(body)\u001b[33m.\u001b[39mtoEqual({ id\u001b[33m:\u001b[39m \u001b[32m'recordId'\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:104:30)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623741111293,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 10,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623741327089,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 10,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623741346787, "runtime": 18933, "slow": true, "start": 1623741327854 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 489,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 168,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 137,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 120,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 112,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 111,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 124,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 101,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 104,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 99,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623741347461,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 10,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623753250599,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 10,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623753265474, "runtime": 13889, "slow": true, "start": 1623753251585 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 374,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 133,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 110,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 76,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 71,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 85,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 95,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 81,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 65,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 70,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623753265982,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 10,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623753531619,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 10,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623753544379, "runtime": 11845, "slow": true, "start": 1623753532534 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 339,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 134,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 90,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 75,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 68,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 77,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 102,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 83,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 69,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 63,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623753544829,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 9,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623762470555,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 9,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623762488404, "runtime": 16994, "slow": true, "start": 1623762471410 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 353,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -45,8 +45,8 @@\u001b[39m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[2m    \"typeName\": \"mc:MCRasterRecord\",\u001b[22m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[32m-   \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[39m\n\u001b[31m+   \"wktGeometry\": \"POLYGON ((0 1, 1 1, 1 0, 0 1))\",\u001b[39m\n\u001b[2m    \"xml\": \"\",\u001b[22m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -45,8 +45,8 @@\u001b[39m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[2m    \"typeName\": \"mc:MCRasterRecord\",\u001b[22m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[32m-   \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[39m\n\u001b[31m+   \"wktGeometry\": \"POLYGON ((0 1, 1 1, 1 0, 0 1))\",\u001b[39m\n\u001b[2m    \"xml\": \"\",\u001b[22m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:104:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -45,8 +45,8 @@\u001b[39m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[2m    \"typeName\": \"mc:MCRasterRecord\",\u001b[22m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[32m-   \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[39m\n\u001b[31m+   \"wktGeometry\": \"POLYGON ((0 1, 1 1, 1 0, 0 1))\",\u001b[39m\n\u001b[2m    \"xml\": \"\",\u001b[22m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts:104:30)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 128,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 88,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 78,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 74,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 91,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 107,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 94,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 85,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 72,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n    \u001b[32m- Object {\u001b[39m\n    \u001b[31m+ RecordEntity {\u001b[39m\n    \u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n    \u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"footprint\": Object {\u001b[22m\n    \u001b[2m      \"coordinates\": Array [\u001b[22m\n    \u001b[2m        Array [\u001b[22m\n    \u001b[33m@@ -45,8 +45,8 @@\u001b[39m\n    \u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n    \u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n    \u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n    \u001b[2m    \"typeName\": \"mc:MCRasterRecord\",\u001b[22m\n    \u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[32m-   \"wktGeometry\": \"POLYGON ((0 0,1 0,1 1,0 1,0 0))\",\u001b[39m\n    \u001b[31m+   \"wktGeometry\": \"POLYGON ((0 1, 1 1, 1 0, 0 1))\",\u001b[39m\n    \u001b[2m    \"xml\": \"\",\u001b[22m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 102 | \u001b[39m      expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 103 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 104 | \u001b[39m      expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 105 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 106 | \u001b[39m      \u001b[36mconst\u001b[39m body \u001b[33m=\u001b[39m response\u001b[33m.\u001b[39mbody as unknown\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 | \u001b[39m      expect(body)\u001b[33m.\u001b[39mtoEqual({ id\u001b[33m:\u001b[39m \u001b[32m'recordId'\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/jobs.spec.ts\u001b[39m\u001b[0m\u001b[2m:104:30)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623762489041,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 10,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623762907640,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 10,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623762929132, "runtime": 20654, "slow": true, "start": 1623762908478 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 391,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 158,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 112,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 81,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 77,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 86,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 104,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 84,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 68,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 72,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623762929640,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 10,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623822595723,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 10,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623822614640, "runtime": 18546, "slow": true, "start": 1623822596094 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 374,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 150,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 108,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 108,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 113,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 126,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 112,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 72,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 77,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623822614970,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 10,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623839142080,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 10,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623839164540, "runtime": 22088, "slow": true, "start": 1623839142452 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 411,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 153,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 95,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 77,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 82,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 91,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 96,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 103,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 77,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 67,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623839164845,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 10,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 10,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623844696057,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 10,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623844711597, "runtime": 15127, "slow": true, "start": 1623844696470 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\jobs.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 458,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 175,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 110,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 92,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 111,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 111,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 79,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 118,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623844711930,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623845985200,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623846006236, "runtime": 20668, "slow": true, "start": 1623845985568 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 398,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 148,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 97,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 90,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 85,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 236,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 83,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 78,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 80,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 100,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623846006582,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623847486487,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623847504511, "runtime": 17696, "slow": true, "start": 1623847486815 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 423,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 155,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 100,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 81,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 91,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 5,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 216,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 87,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 76,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 83,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 84,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 83,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623847504862,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 12,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623908561880,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 12,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623908590222, "runtime": 27865, "slow": true, "start": 1623908562357 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 599,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 185,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 121,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 84,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 98,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[32m-   \"accuracyCE90\": 0.68,\u001b[39m\n\u001b[31m+   \"where\": Object {\u001b[39m\n\u001b[31m+     \"metadata\": Object {\u001b[39m\n\u001b[31m+       \"accuracyCE90\": 0.95678,\u001b[39m\n\u001b[31m+     },\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[32m-   \"accuracyCE90\": 0.68,\u001b[39m\n\u001b[31m+   \"where\": Object {\u001b[39m\n\u001b[31m+     \"metadata\": Object {\u001b[39m\n\u001b[31m+       \"accuracyCE90\": 0.95678,\u001b[39m\n\u001b[31m+     },\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:190:24)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[32m-   \"accuracyCE90\": 0.68,\u001b[39m\n\u001b[31m+   \"where\": Object {\u001b[39m\n\u001b[31m+     \"metadata\": Object {\u001b[39m\n\u001b[31m+       \"accuracyCE90\": 0.95678,\u001b[39m\n\u001b[31m+     },\u001b[39m\n\u001b[31m+   },\u001b[39m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:190:24)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 6,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 192,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 76,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 84,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 90,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 88,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ find should return 200 and list of records when match\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[2m  Object {\u001b[22m\n    \u001b[32m-   \"accuracyCE90\": 0.68,\u001b[39m\n    \u001b[31m+   \"where\": Object {\u001b[39m\n    \u001b[31m+     \"metadata\": Object {\u001b[39m\n    \u001b[31m+       \"accuracyCE90\": 0.95678,\u001b[39m\n    \u001b[31m+     },\u001b[39m\n    \u001b[31m+   },\u001b[39m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 188 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual(expectedResponse)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 189 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 190 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 191 |\u001b[39m         accuracyCE90\u001b[33m:\u001b[39m \u001b[35m0.68\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 192 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 193 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:190:24)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623908590886,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 12,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623910065222,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 12,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623910084323, "runtime": 18671, "slow": true, "start": 1623910065652 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 428,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 156,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 117,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 107,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 116,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 120,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"where\": Object {\u001b[22m\n\u001b[32m-     \"accuracyCE90\": 0.68,\u001b[39m\n\u001b[31m+     \"accuracyCE90\": 0.95678,\u001b[39m\n\u001b[2m    },\u001b[22m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"where\": Object {\u001b[22m\n\u001b[32m-     \"accuracyCE90\": 0.68,\u001b[39m\n\u001b[31m+     \"accuracyCE90\": 0.95678,\u001b[39m\n\u001b[2m    },\u001b[22m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:190:24)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"where\": Object {\u001b[22m\n\u001b[32m-     \"accuracyCE90\": 0.68,\u001b[39m\n\u001b[31m+     \"accuracyCE90\": 0.95678,\u001b[39m\n\u001b[2m    },\u001b[22m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:190:24)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 6,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 149,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 76,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 80,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 84,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 81,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 92,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ find should return 200 and list of records when match\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[2m  Object {\u001b[22m\n    \u001b[2m    \"where\": Object {\u001b[22m\n    \u001b[32m-     \"accuracyCE90\": 0.68,\u001b[39m\n    \u001b[31m+     \"accuracyCE90\": 0.95678,\u001b[39m\n    \u001b[2m    },\u001b[22m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 188 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual(expectedResponse)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 189 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 190 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 191 |\u001b[39m         where\u001b[33m:\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 192 |\u001b[39m           accuracyCE90\u001b[33m:\u001b[39m \u001b[35m0.68\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 193 |\u001b[39m         }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:190:24)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623910084660,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623910203902,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623910222218, "runtime": 17933, "slow": true, "start": 1623910204285 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 386,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 143,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 103,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 77,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 86,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 94,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 164,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 76,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 77,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 81,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 76,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 72,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623910222546,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 0,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 1,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 0,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623910911020,
    "success": false,
    "testResults": [
      {
        "failureMessage": "  \u001b[1m‚óè \u001b[22mTest suite failed to run\n\n    \u001b[96mtests/integration/records/records.spec.ts\u001b[0m:\u001b[93m204\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7034: \u001b[0mVariable 'expectedResponse' implicitly has type 'any[]' in some locations where its type cannot be determined.\n\n    \u001b[7m204\u001b[0m       const expectedResponse = [];\n    \u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtests/integration/records/records.spec.ts\u001b[0m:\u001b[93m206\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7005: \u001b[0mVariable 'expectedResponse' implicitly has an 'any[]' type.\n\n    \u001b[7m206\u001b[0m       expect(response.body).toEqual(expectedResponse);\n    \u001b[7m   \u001b[0m \u001b[91m                                    ~~~~~~~~~~~~~~~~\u001b[0m\n",
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 0,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 0, "runtime": 0, "slow": false, "start": 0 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testExecError": {
          "diagnosticText": "\u001b[96mtests/integration/records/records.spec.ts\u001b[0m:\u001b[93m204\u001b[0m:\u001b[93m13\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7034: \u001b[0mVariable 'expectedResponse' implicitly has type 'any[]' in some locations where its type cannot be determined.\n\n\u001b[7m204\u001b[0m       const expectedResponse = [];\n\u001b[7m   \u001b[0m \u001b[91m            ~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[96mtests/integration/records/records.spec.ts\u001b[0m:\u001b[93m206\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS7005: \u001b[0mVariable 'expectedResponse' implicitly has an 'any[]' type.\n\n\u001b[7m206\u001b[0m       expect(response.body).toEqual(expectedResponse);\n\u001b[7m   \u001b[0m \u001b[91m                                    ~~~~~~~~~~~~~~~~\u001b[0m\n",
          "diagnosticCodes": [7034, 7005]
        },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": []
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623910919546,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 12,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623911053911,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 12,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623911075006, "runtime": 20615, "slow": true, "start": 1623911054391 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 427,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 151,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 104,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 81,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 94,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 95,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 135,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 200, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:205:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:205:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 87,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 79,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 80,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 84,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 83,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 76,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ find should return 200 and empty list of records when don't match\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 203 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 204 |\u001b[39m       \u001b[36mconst\u001b[39m expectedResponse\u001b[33m:\u001b[39m unknown[] \u001b[33m=\u001b[39m []\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 205 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 206 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual(expectedResponse)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 207 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 208 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:205:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623911075335,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1623911419930,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1623911437909, "runtime": 17599, "slow": true, "start": 1623911420310 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 412,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 167,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 108,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 90,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 90,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 104,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 101,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 86,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 82,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 134,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 136,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 106,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1623911438375,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 12,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1624450359927,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 12,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1624450380407, "runtime": 20102, "slow": true, "start": 1624450360305 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 480,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:102:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:102:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 179,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 108,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 92,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 81,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 92,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 111,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 90,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 88,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 85,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 77,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 100 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mcreateResource(testCreateRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 101 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 102 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 103 |\u001b[39m       expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 104 |\u001b[39m       expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 105 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:102:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1624450381036,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1624451788557,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1624451810098, "runtime": 20879, "slow": true, "start": 1624451789219 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 408,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 168,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 107,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 87,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 90,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 94,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 117,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 92,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 72,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 92,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 104,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 87,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 81,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1624451810446,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 12,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1624885443682,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 12,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1624885466665, "runtime": 22510, "slow": true, "start": 1624885444155 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 801,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 142,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 98,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 82,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 78,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 187,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 200, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:193:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:193:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 97,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 95,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 77,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 85,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 85,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 80,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 71,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ find should return 200 and list of records when match\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 191 |\u001b[39m         }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 192 |\u001b[39m       ]\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 193 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 194 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual(expectedResponse)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 195 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 196 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:193:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1624885467089,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 2,
    "numPassedTestSuites": 0,
    "numPassedTests": 11,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1624886451044,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 2,
        "numPassingTests": 11,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1624886469088, "runtime": 17646, "slow": true, "start": 1624886451442 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 403,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -35,11 +35,13 @@\u001b[39m\n\u001b[2m    \"region\": \"a\",\u001b[22m\n\u001b[2m    \"resolution\": 0.5,\u001b[22m\n\u001b[2m    \"rms\": 0.444,\u001b[22m\n\u001b[2m    \"scale\": \"1:9\",\u001b[22m\n\u001b[2m    \"schema\": \"mc_raster\",\u001b[22m\n\u001b[32m-   \"sensorType\": \"Pan_Sharpen\",\u001b[39m\n\u001b[31m+   \"sensorType\": Array [\u001b[39m\n\u001b[31m+     \"Pan_Sharpen\",\u001b[39m\n\u001b[31m+   ],\u001b[39m\n\u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -35,11 +35,13 @@\u001b[39m\n\u001b[2m    \"region\": \"a\",\u001b[22m\n\u001b[2m    \"resolution\": 0.5,\u001b[22m\n\u001b[2m    \"rms\": 0.444,\u001b[22m\n\u001b[2m    \"scale\": \"1:9\",\u001b[22m\n\u001b[2m    \"schema\": \"mc_raster\",\u001b[22m\n\u001b[32m-   \"sensorType\": \"Pan_Sharpen\",\u001b[39m\n\u001b[31m+   \"sensorType\": Array [\u001b[39m\n\u001b[31m+     \"Pan_Sharpen\",\u001b[39m\n\u001b[31m+   ],\u001b[39m\n\u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:108:45)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -35,11 +35,13 @@\u001b[39m\n\u001b[2m    \"region\": \"a\",\u001b[22m\n\u001b[2m    \"resolution\": 0.5,\u001b[22m\n\u001b[2m    \"rms\": 0.444,\u001b[22m\n\u001b[2m    \"scale\": \"1:9\",\u001b[22m\n\u001b[2m    \"schema\": \"mc_raster\",\u001b[22m\n\u001b[32m-   \"sensorType\": \"Pan_Sharpen\",\u001b[39m\n\u001b[31m+   \"sensorType\": Array [\u001b[39m\n\u001b[31m+     \"Pan_Sharpen\",\u001b[39m\n\u001b[31m+   ],\u001b[39m\n\u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:108:45)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 155,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 113,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 83,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 108,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 189,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 200, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:194:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:194:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 97,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 91,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 80,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 106,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 86,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 96,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 72,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n    \u001b[32m- Object {\u001b[39m\n    \u001b[31m+ RecordEntity {\u001b[39m\n    \u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n    \u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"footprint\": Object {\u001b[22m\n    \u001b[2m      \"coordinates\": Array [\u001b[22m\n    \u001b[2m        Array [\u001b[22m\n    \u001b[33m@@ -35,11 +35,13 @@\u001b[39m\n    \u001b[2m    \"region\": \"a\",\u001b[22m\n    \u001b[2m    \"resolution\": 0.5,\u001b[22m\n    \u001b[2m    \"rms\": 0.444,\u001b[22m\n    \u001b[2m    \"scale\": \"1:9\",\u001b[22m\n    \u001b[2m    \"schema\": \"mc_raster\",\u001b[22m\n    \u001b[32m-   \"sensorType\": \"Pan_Sharpen\",\u001b[39m\n    \u001b[31m+   \"sensorType\": Array [\u001b[39m\n    \u001b[31m+     \"Pan_Sharpen\",\u001b[39m\n    \u001b[31m+   ],\u001b[39m\n    \u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n    \u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n    \u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 106 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 108 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 109 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[32m'identifier'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mexecute)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:108:45)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ find should return 200 and list of records when match\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 192 |\u001b[39m         }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 193 |\u001b[39m       ]\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 194 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 195 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual(expectedResponse)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 196 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 197 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:194:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1624886469436,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 2,
    "numPassedTestSuites": 0,
    "numPassedTests": 11,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1624886556359,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 2,
        "numPassingTests": 11,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1624886569941, "runtime": 13185, "slow": true, "start": 1624886556756 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 384,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -35,11 +35,13 @@\u001b[39m\n\u001b[2m    \"region\": \"a\",\u001b[22m\n\u001b[2m    \"resolution\": 0.5,\u001b[22m\n\u001b[2m    \"rms\": 0.444,\u001b[22m\n\u001b[2m    \"scale\": \"1:9\",\u001b[22m\n\u001b[2m    \"schema\": \"mc_raster\",\u001b[22m\n\u001b[32m-   \"sensorType\": \"Pan_Sharpen\",\u001b[39m\n\u001b[31m+   \"sensorType\": Array [\u001b[39m\n\u001b[31m+     \"Pan_Sharpen\",\u001b[39m\n\u001b[31m+   ],\u001b[39m\n\u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -35,11 +35,13 @@\u001b[39m\n\u001b[2m    \"region\": \"a\",\u001b[22m\n\u001b[2m    \"resolution\": 0.5,\u001b[22m\n\u001b[2m    \"rms\": 0.444,\u001b[22m\n\u001b[2m    \"scale\": \"1:9\",\u001b[22m\n\u001b[2m    \"schema\": \"mc_raster\",\u001b[22m\n\u001b[32m-   \"sensorType\": \"Pan_Sharpen\",\u001b[39m\n\u001b[31m+   \"sensorType\": Array [\u001b[39m\n\u001b[31m+     \"Pan_Sharpen\",\u001b[39m\n\u001b[31m+   ],\u001b[39m\n\u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:108:45)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -35,11 +35,13 @@\u001b[39m\n\u001b[2m    \"region\": \"a\",\u001b[22m\n\u001b[2m    \"resolution\": 0.5,\u001b[22m\n\u001b[2m    \"rms\": 0.444,\u001b[22m\n\u001b[2m    \"scale\": \"1:9\",\u001b[22m\n\u001b[2m    \"schema\": \"mc_raster\",\u001b[22m\n\u001b[32m-   \"sensorType\": \"Pan_Sharpen\",\u001b[39m\n\u001b[31m+   \"sensorType\": Array [\u001b[39m\n\u001b[31m+     \"Pan_Sharpen\",\u001b[39m\n\u001b[31m+   ],\u001b[39m\n\u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:108:45)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 157,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 113,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 78,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 83,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 197,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 200, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:194:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:194:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 109,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 76,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 75,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 115,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 86,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 86,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n    \u001b[32m- Object {\u001b[39m\n    \u001b[31m+ RecordEntity {\u001b[39m\n    \u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n    \u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"footprint\": Object {\u001b[22m\n    \u001b[2m      \"coordinates\": Array [\u001b[22m\n    \u001b[2m        Array [\u001b[22m\n    \u001b[33m@@ -35,11 +35,13 @@\u001b[39m\n    \u001b[2m    \"region\": \"a\",\u001b[22m\n    \u001b[2m    \"resolution\": 0.5,\u001b[22m\n    \u001b[2m    \"rms\": 0.444,\u001b[22m\n    \u001b[2m    \"scale\": \"1:9\",\u001b[22m\n    \u001b[2m    \"schema\": \"mc_raster\",\u001b[22m\n    \u001b[32m-   \"sensorType\": \"Pan_Sharpen\",\u001b[39m\n    \u001b[31m+   \"sensorType\": Array [\u001b[39m\n    \u001b[31m+     \"Pan_Sharpen\",\u001b[39m\n    \u001b[31m+   ],\u001b[39m\n    \u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n    \u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n    \u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 106 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 108 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 109 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[32m'identifier'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mexecute)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:108:45)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ find should return 200 and list of records when match\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 192 |\u001b[39m         }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 193 |\u001b[39m       ]\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 194 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 195 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual(expectedResponse)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 196 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 197 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:194:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1624886570273,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 12,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1624887621303,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 12,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1624887638954, "runtime": 17263, "slow": true, "start": 1624887621691 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 373,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 161,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 92,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 80,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 171,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 200, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:194:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:194:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 91,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 113,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 81,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 81,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 100,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 77,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 83,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ find should return 200 and list of records when match\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 192 |\u001b[39m         }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 193 |\u001b[39m       ]\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 194 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 195 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual(expectedResponse)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 196 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 197 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:194:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1624887639260,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 12,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1624887778196,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 12,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1624887796014, "runtime": 17463, "slow": true, "start": 1624887778551 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 450,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 183,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 102,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 77,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 79,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 137,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 200, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:194:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:194:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 104,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 85,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 86,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 83,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 78,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 90,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 75,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ find should return 200 and list of records when match\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 192 |\u001b[39m         }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 193 |\u001b[39m       ]\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 194 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 195 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual(expectedResponse)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 196 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 197 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:194:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1624887796360,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 12,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1624887879782,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 12,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1624887897202, "runtime": 17043, "slow": true, "start": 1624887880159 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 419,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 200, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:194:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:194:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ find should return 200 and list of records when match\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 192 |\u001b[39m         }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 193 |\u001b[39m       ]\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 194 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 195 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual(expectedResponse)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 196 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 197 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:194:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1624887897533,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 1,
    "numPendingTestSuites": 0,
    "numPendingTests": 12,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1624888109235,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 1,
        "numPendingTests": 12,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1624888133040, "runtime": 23414, "slow": true, "start": 1624888109626 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 524,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 0,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1624888133559,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1624888214726,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1624888234449, "runtime": 19307, "slow": true, "start": 1624888215142 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 415,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 181,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 121,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 98,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 80,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 96,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 128,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 91,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 103,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 112,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 84,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 84,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 92,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1624888234705,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1624888367797,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1624888381606, "runtime": 13363, "slow": true, "start": 1624888368243 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 544,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 196,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 109,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 86,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 97,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 113,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 137,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 112,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 99,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 90,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 101,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 92,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1624888381900,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1624888939623,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1624888952868, "runtime": 12851, "slow": true, "start": 1624888940017 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 388,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 147,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 108,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 73,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 83,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 96,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 102,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 77,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 80,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 94,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 86,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 82,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1624888953135,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 12,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1624967898165,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 12,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1624967919563, "runtime": 20934, "slow": true, "start": 1624967898629 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 478,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -41,10 +41,10 @@\u001b[39m\n\u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[32m-   \"typeName\": \"mc:MCRasterRecord\",\u001b[39m\n\u001b[31m+   \"typeName\": \"mc_MCRasterRecord\",\u001b[39m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"wktGeometry\": \"POLYGON ((0 1, 1 1, 1 0, 0 1))\",\u001b[22m\n\u001b[2m    \"xml\": \"\",\u001b[22m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -41,10 +41,10 @@\u001b[39m\n\u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[32m-   \"typeName\": \"mc:MCRasterRecord\",\u001b[39m\n\u001b[31m+   \"typeName\": \"mc_MCRasterRecord\",\u001b[39m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"wktGeometry\": \"POLYGON ((0 1, 1 1, 1 0, 0 1))\",\u001b[22m\n\u001b[2m    \"xml\": \"\",\u001b[22m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:108:45)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -41,10 +41,10 @@\u001b[39m\n\u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n\u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n\u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n\u001b[32m-   \"typeName\": \"mc:MCRasterRecord\",\u001b[39m\n\u001b[31m+   \"typeName\": \"mc_MCRasterRecord\",\u001b[39m\n\u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"wktGeometry\": \"POLYGON ((0 1, 1 1, 1 0, 0 1))\",\u001b[22m\n\u001b[2m    \"xml\": \"\",\u001b[22m\n\u001b[2m  }\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:108:45)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 141,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 112,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 85,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 90,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 95,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 160,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 173,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 133,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 88,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 86,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 92,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 94,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n    \u001b[32m- Object {\u001b[39m\n    \u001b[31m+ RecordEntity {\u001b[39m\n    \u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n    \u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"footprint\": Object {\u001b[22m\n    \u001b[2m      \"coordinates\": Array [\u001b[22m\n    \u001b[2m        Array [\u001b[22m\n    \u001b[33m@@ -41,10 +41,10 @@\u001b[39m\n    \u001b[2m    \"sourceDateEnd\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"sourceDateStart\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"srsId\": \"epsg:4326\",\u001b[22m\n    \u001b[2m    \"srsName\": \"marcator\",\u001b[22m\n    \u001b[2m    \"type\": \"RECORD_RASTER\",\u001b[22m\n    \u001b[32m-   \"typeName\": \"mc:MCRasterRecord\",\u001b[39m\n    \u001b[31m+   \"typeName\": \"mc_MCRasterRecord\",\u001b[39m\n    \u001b[2m    \"updateDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"wktGeometry\": \"POLYGON ((0 1, 1 1, 1 0, 0 1))\",\u001b[22m\n    \u001b[2m    \"xml\": \"\",\u001b[22m\n    \u001b[2m  }\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 106 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 108 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 109 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[32m'identifier'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mexecute)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:108:45)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1624967919906,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1624968237839,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1624968263402, "runtime": 25078, "slow": true, "start": 1624968238324 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "D:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 480,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 148,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 104,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 83,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 92,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 110,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 86,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 73,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 75,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 87,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 78,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 83,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "D:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "D:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "D:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1624968263673,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 12,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1633327669216,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 12,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1633327691537, "runtime": 21904, "slow": true, "start": 1633327669633 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 406,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 400, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:106:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:106:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 164,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 105,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 85,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 91,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 106,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 100,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 92,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 72,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 81,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 86,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 82,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 104 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mcreateResource(testCreateRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 105 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 106 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 108 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 109 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:106:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1633327691859,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 12,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1633327884918,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 12,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1633327906536, "runtime": 21211, "slow": true, "start": 1633327885325 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 457,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 400, "expected": 201, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:108:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:108:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 154,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 118,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 99,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 94,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 85,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 115,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 82,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 76,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 112,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 95,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 91,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 98,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 106 |\u001b[39m       console\u001b[33m.\u001b[39mlog(response\u001b[33m.\u001b[39mbody)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 108 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 109 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:108:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1633327906855,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1633328843854,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1633328864086, "runtime": 19808, "slow": true, "start": 1633328844278 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 463,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 165,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 128,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 76,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 101,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 100,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 121,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 96,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 81,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 86,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 83,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1633328864415,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1633330379909,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1633330401481, "runtime": 21107, "slow": true, "start": 1633330380374 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 461,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 175,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 117,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 82,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 90,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 125,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 84,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 87,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 85,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 88,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 77,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1633330401792,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 12,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1633330526611,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 12,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1633330546413, "runtime": 19388, "slow": true, "start": 1633330527025 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 396,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 141,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 120,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 83,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 91,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 100,
            "failureDetails": [
              {
                "actual": "",
                "error": {
                  "matcherResult": {
                    "actual": [
                      {
                        "id": "recordId",
                        "links": [
                          { "protocol": "test", "url": "http://test.test/wmts" },
                          { "name": "testLink", "description": "test test test", "protocol": "fulltest", "url": "http://test.test/wms" }
                        ],
                        "metadata": {
                          "type": "RECORD_RASTER",
                          "productName": "testName",
                          "srsId": "epsg:4326",
                          "producerName": "test",
                          "creationDate": "2021-06-07T05:41:43.032Z",
                          "ingestionDate": "2021-06-07T05:41:43.032Z",
                          "updateDate": "2021-06-07T05:41:43.032Z",
                          "sourceDateStart": "2021-06-07T05:41:43.032Z",
                          "sourceDateEnd": "2021-06-07T05:41:43.032Z",
                          "accuracyCE90": 0.68,
                          "sensorType": ["Pan_Sharpen"],
                          "region": "a",
                          "productId": "testId",
                          "productVersion": "testVersion",
                          "productType": "Orthophoto",
                          "srsName": "marcator",
                          "resolution": 0.5,
                          "rms": 0.444,
                          "scale": "1:9",
                          "footprint": {
                            "type": "Polygon",
                            "coordinates": [
                              [
                                [0, 1],
                                [1, 1],
                                [1, 0],
                                [0, 1]
                              ]
                            ]
                          },
                          "includedInBests": []
                        }
                      }
                    ],
                    "expected": [
                      {
                        "metadata": {
                          "type": "RECORD_RASTER",
                          "productId": "testId",
                          "productName": "testName",
                          "productVersion": "testVersion",
                          "producerName": "test",
                          "productType": "Orthophoto",
                          "srsId": "epsg:4326",
                          "srsName": "marcator",
                          "updateDate": "2021-06-07T05:41:43.032Z",
                          "sourceDateStart": "2021-06-07T05:41:43.032Z",
                          "sourceDateEnd": "2021-06-07T05:41:43.032Z",
                          "accuracyCE90": 0.68,
                          "sensorType": ["Pan_Sharpen"],
                          "region": "a",
                          "rms": 0.444,
                          "scale": "1:9",
                          "footprint": { "type": "Geometry" },
                          "creationDate": "2021-06-07T05:41:43.032Z",
                          "ingestionDate": "2021-06-07T05:41:43.032Z",
                          "resolution": 0.5
                        },
                        "links": [
                          { "protocol": "test", "url": "http://test.test/wmts" },
                          { "name": "testLink", "description": "test test test", "protocol": "fulltest", "url": "http://test.test/wms" }
                        ],
                        "id": "recordId"
                      }
                    ],
                    "name": "toEqual",
                    "pass": false
                  }
                },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  - 0\u001b[39m\n\u001b[31m+ Received  + 1\u001b[39m\n\n\u001b[33m@@ -37,10 +37,11 @@\u001b[39m\n\u001b[2m              ],\u001b[22m\n\u001b[2m            ],\u001b[22m\n\u001b[2m          ],\u001b[22m\n\u001b[2m          \"type\": \"Polygon\",\u001b[22m\n\u001b[2m        },\u001b[22m\n\u001b[31m+       \"includedInBests\": Array [],\u001b[39m\n\u001b[2m        \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m        \"producerName\": \"test\",\u001b[22m\n\u001b[2m        \"productId\": \"testId\",\u001b[22m\n\u001b[2m        \"productName\": \"testName\",\u001b[22m\n\u001b[2m        \"productType\": \"Orthophoto\",\u001b[22m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  - 0\u001b[39m\n\u001b[31m+ Received  + 1\u001b[39m\n\n\u001b[33m@@ -37,10 +37,11 @@\u001b[39m\n\u001b[2m              ],\u001b[22m\n\u001b[2m            ],\u001b[22m\n\u001b[2m          ],\u001b[22m\n\u001b[2m          \"type\": \"Polygon\",\u001b[22m\n\u001b[2m        },\u001b[22m\n\u001b[31m+       \"includedInBests\": Array [],\u001b[39m\n\u001b[2m        \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m        \"producerName\": \"test\",\u001b[22m\n\u001b[2m        \"productId\": \"testId\",\u001b[22m\n\u001b[2m        \"productName\": \"testName\",\u001b[22m\n\u001b[2m        \"productType\": \"Orthophoto\",\u001b[22m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:196:29)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  - 0\u001b[39m\n\u001b[31m+ Received  + 1\u001b[39m\n\n\u001b[33m@@ -37,10 +37,11 @@\u001b[39m\n\u001b[2m              ],\u001b[22m\n\u001b[2m            ],\u001b[22m\n\u001b[2m          ],\u001b[22m\n\u001b[2m          \"type\": \"Polygon\",\u001b[22m\n\u001b[2m        },\u001b[22m\n\u001b[31m+       \"includedInBests\": Array [],\u001b[39m\n\u001b[2m        \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m        \"producerName\": \"test\",\u001b[22m\n\u001b[2m        \"productId\": \"testId\",\u001b[22m\n\u001b[2m        \"productName\": \"testName\",\u001b[22m\n\u001b[2m        \"productType\": \"Orthophoto\",\u001b[22m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:196:29)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 98,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 79,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 81,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 84,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 80,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 71,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ find should return 200 and list of records when match\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    \u001b[32m- Expected  - 0\u001b[39m\n    \u001b[31m+ Received  + 1\u001b[39m\n\n    \u001b[33m@@ -37,10 +37,11 @@\u001b[39m\n    \u001b[2m              ],\u001b[22m\n    \u001b[2m            ],\u001b[22m\n    \u001b[2m          ],\u001b[22m\n    \u001b[2m          \"type\": \"Polygon\",\u001b[22m\n    \u001b[2m        },\u001b[22m\n    \u001b[31m+       \"includedInBests\": Array [],\u001b[39m\n    \u001b[2m        \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m        \"producerName\": \"test\",\u001b[22m\n    \u001b[2m        \"productId\": \"testId\",\u001b[22m\n    \u001b[2m        \"productName\": \"testName\",\u001b[22m\n    \u001b[2m        \"productType\": \"Orthophoto\",\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 194 |\u001b[39m       ]\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 195 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 196 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual(expectedResponse)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 197 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 198 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 199 |\u001b[39m         where\u001b[33m:\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:196:29)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1633330546729,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 2,
    "numPassedTestSuites": 0,
    "numPassedTests": 11,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1633333852611,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 2,
        "numPassingTests": 11,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1633333873748, "runtime": 20656, "slow": true, "start": 1633333853092 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 449,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -22,11 +22,11 @@\u001b[39m\n\u001b[2m          ],\u001b[22m\n\u001b[2m        ],\u001b[22m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[32m-   \"includedInBests\": Array [],\u001b[39m\n\u001b[31m+   \"includedInBests\": \"\",\u001b[39m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[22m\n\u001b[2m    \"mdSource\": \"\",\u001b[22m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -22,11 +22,11 @@\u001b[39m\n\u001b[2m          ],\u001b[22m\n\u001b[2m        ],\u001b[22m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[32m-   \"includedInBests\": Array [],\u001b[39m\n\u001b[31m+   \"includedInBests\": \"\",\u001b[39m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[22m\n\u001b[2m    \"mdSource\": \"\",\u001b[22m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:109:45)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n\u001b[32m- Object {\u001b[39m\n\u001b[31m+ RecordEntity {\u001b[39m\n\u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n\u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"footprint\": Object {\u001b[22m\n\u001b[2m      \"coordinates\": Array [\u001b[22m\n\u001b[2m        Array [\u001b[22m\n\u001b[33m@@ -22,11 +22,11 @@\u001b[39m\n\u001b[2m          ],\u001b[22m\n\u001b[2m        ],\u001b[22m\n\u001b[2m      ],\u001b[22m\n\u001b[2m      \"type\": \"Polygon\",\u001b[22m\n\u001b[2m    },\u001b[22m\n\u001b[32m-   \"includedInBests\": Array [],\u001b[39m\n\u001b[31m+   \"includedInBests\": \"\",\u001b[39m\n\u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n\u001b[2m    \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[22m\n\u001b[2m    \"mdSource\": \"\",\u001b[22m\n\u001b[2m    \"producerName\": \"test\",\u001b[22m\n\u001b[2m    \"productId\": \"testId\",\u001b[22m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:109:45)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 167,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 107,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 80,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 83,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 140,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 200, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:196:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:196:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 94,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 88,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 75,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 80,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 78,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 87,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 82,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[33m@@ -1,6 +1,6 @@\u001b[39m\n    \u001b[32m- Object {\u001b[39m\n    \u001b[31m+ RecordEntity {\u001b[39m\n    \u001b[2m    \"accuracyCE90\": 0.68,\u001b[22m\n    \u001b[2m    \"creationDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"footprint\": Object {\u001b[22m\n    \u001b[2m      \"coordinates\": Array [\u001b[22m\n    \u001b[2m        Array [\u001b[22m\n    \u001b[33m@@ -22,11 +22,11 @@\u001b[39m\n    \u001b[2m          ],\u001b[22m\n    \u001b[2m        ],\u001b[22m\n    \u001b[2m      ],\u001b[22m\n    \u001b[2m      \"type\": \"Polygon\",\u001b[22m\n    \u001b[2m    },\u001b[22m\n    \u001b[32m-   \"includedInBests\": Array [],\u001b[39m\n    \u001b[31m+   \"includedInBests\": \"\",\u001b[39m\n    \u001b[2m    \"ingestionDate\": \"2021-06-07T05:41:43.032Z\",\u001b[22m\n    \u001b[2m    \"links\": \",,test,http://test.test/wmts^testLink,test test test,fulltest,http://test.test/wms\",\u001b[22m\n    \u001b[2m    \"mdSource\": \"\",\u001b[22m\n    \u001b[2m    \"producerName\": \"test\",\u001b[22m\n    \u001b[2m    \"productId\": \"testId\",\u001b[22m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 108 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 109 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[32m'identifier'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 112 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mexecute)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:109:45)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ find should return 200 and list of records when match\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 194 |\u001b[39m         }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 195 |\u001b[39m       ]\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 196 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 197 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual(expectedResponse)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 198 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 199 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:196:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1633333874052,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 12,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1633334173310,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 12,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1633334193804, "runtime": 20062, "slow": true, "start": 1633334173742 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 396,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 148,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 112,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 74,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 134,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 200, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:197:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:197:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 104,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 85,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 77,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 82,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 75,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ find should return 200 and list of records when match\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 195 |\u001b[39m         }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 196 |\u001b[39m       ]\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 197 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 198 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual(expectedResponse)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 199 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 200 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:197:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1633334194105,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 12,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1633334434712,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 12,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1633334454815, "runtime": 19678, "slow": true, "start": 1633334435137 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 455,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 154,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 114,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 79,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 82,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 157,
            "failureDetails": [
              {
                "actual": "",
                "error": { "matcherResult": { "actual": 500, "expected": 200, "name": "toBe", "pass": false } },
                "expected": "",
                "matcherName": "",
                "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                "passed": false,
                "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:198:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:198:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 99,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 84,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 81,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 82,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 83,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 91,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 100,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ find should return 200 and list of records when match\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 196 |\u001b[39m       ]\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 197 |\u001b[39m       console\u001b[33m.\u001b[39mlog(response\u001b[33m.\u001b[39mbody)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 198 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 199 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual(expectedResponse)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 200 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 201 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:198:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1633334455125,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1633334646627,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1633334668507, "runtime": 21452, "slow": true, "start": 1633334647055 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 539,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 186,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 123,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 102,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 101,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 127,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 196,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 145,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 162,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 154,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 142,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 136,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 147,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1633334669282,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1633417259897,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1633417281422, "runtime": 21088, "slow": true, "start": 1633417260334 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 452,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 201,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 115,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 96,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 94,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 96,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 110,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 84,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 76,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 78,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 95,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 84,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 84,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1633417281738,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1633417612111,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1633417630713, "runtime": 18157, "slow": true, "start": 1633417612556 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 420,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 170,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 114,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 78,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 78,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 94,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 109,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 97,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 78,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 79,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 90,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 80,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 71,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1633417631033,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1633872104873,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1633872128511, "runtime": 23156, "slow": true, "start": 1633872105355 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "unmatched": 0, "updated": 0, "uncheckedKeys": [] },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 485,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 181,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 122,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 96,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 95,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 110,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 119,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 107,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 97,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 100,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 109,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 79,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1633872128853,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1633872376951,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1633872400503, "runtime": 22703, "slow": true, "start": 1633872377800 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 460,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 191,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 130,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 108,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 135,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 104,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 98,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 105,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 101,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 100,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 95,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1633872400909,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1633872763920,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1633872788901, "runtime": 24056, "slow": true, "start": 1633872764845 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 484,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 200,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 138,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 100,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 113,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 121,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 128,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 111,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 108,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 119,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 106,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 117,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 96,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1633872789335,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1634040394322,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1634040416439, "runtime": 21265, "slow": true, "start": 1634040395174 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 455,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 174,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 124,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 81,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 99,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 102,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 94,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 95,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 85,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 86,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 97,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 77,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1634040416822,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 12,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1634103604301,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 12,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1634103624919, "runtime": 19830, "slow": true, "start": 1634103605089 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 406,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 400,
                  "expected": 201,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:108:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 191,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 112,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 81,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 96,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 127,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 90,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 102,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 135,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 123,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 148,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 119,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 106 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mcreateResource(testCreateRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 108 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 109 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:108:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1634103625387,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 12,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1634103896261,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 12,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1634103917854, "runtime": 20289, "slow": true, "start": 1634103897565 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 411,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 400,
                  "expected": 201,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:108:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 161,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 113,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 85,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 92,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 91,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 129,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 112,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 125,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 118,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 118,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 104,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 77,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 106 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mcreateResource(testCreateRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 108 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 109 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:108:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1634103918236,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 12,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1634104254869,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 12,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1634104284670, "runtime": 29004, "slow": true, "start": 1634104255666 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 850,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 400,
                  "expected": 201,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:108:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 284,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 288,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 188,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 202,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 184,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 212,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 147,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 144,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 160,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 154,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 149,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 146,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 106 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mcreateResource(testCreateRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 108 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 109 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:108:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1634104285532,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 12,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1634104509455,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 12,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1634104534356, "runtime": 24055, "slow": true, "start": 1634104510301 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 461,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 400,
                  "expected": 201,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:108:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 226,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 151,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 116,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 106,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 135,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 94,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 114,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 120,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 138,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 132,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 119,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 106 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mcreateResource(testCreateRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 108 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 109 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:108:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1634104534756,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 12,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1634104856236,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 12,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1634104880829, "runtime": 23717, "slow": true, "start": 1634104857112 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 452,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 400,
                  "expected": 201,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:108:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 285,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 185,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 198,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 193,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 164,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 191,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 164,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 153,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 227,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 157,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 187,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 136,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 106 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mcreateResource(testCreateRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 108 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 109 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:108:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1634104881458,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 12,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1634104965767,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 12,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1634104988895, "runtime": 22229, "slow": true, "start": 1634104966666 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 525,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 400,
                  "expected": 201,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:108:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 106 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mcreateResource(testCreateRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 108 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 109 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:108:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1634104989302,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 1,
    "numPassedTestSuites": 0,
    "numPassedTests": 0,
    "numPendingTestSuites": 0,
    "numPendingTests": 12,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1634105101858,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 1,
        "numPassingTests": 0,
        "numPendingTests": 12,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1634105124666, "runtime": 21768, "slow": true, "start": 1634105102898 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 407,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 400,
                  "expected": 201,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m400\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:108:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m400\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 106 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mcreateResource(testCreateRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 108 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 109 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:108:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1634105125047,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 1,
    "numPendingTestSuites": 0,
    "numPendingTests": 12,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1634105260028,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 1,
        "numPendingTests": 12,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1634105278396, "runtime": 17512, "slow": true, "start": 1634105260884 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 401,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": null,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "pending",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1634105278762,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1634105385554,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1634105405728, "runtime": 19404, "slow": true, "start": 1634105386324 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 382,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 172,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 118,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 84,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 84,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 94,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 127,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 95,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 79,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 94,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 90,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 77,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1634105406115,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1634106582193,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1634106602514, "runtime": 19552, "slow": true, "start": 1634106582962 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 414,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 165,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 113,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 87,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 94,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 112,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 149,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 94,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 125,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 99,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 97,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 109,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 83,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1634106602900,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1634189320805,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1634189342665, "runtime": 21049, "slow": true, "start": 1634189321616 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 439,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 192,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 118,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 80,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 95,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 95,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 114,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 113,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 84,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 97,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 103,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 121,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 88,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1634189343106,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1634453195178,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1634453217352, "runtime": 21293, "slow": true, "start": 1634453196059 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 449,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 199,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 107,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 117,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 106,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 105,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 132,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 115,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 101,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 101,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 100,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 105,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 130,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1634453217891,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 9,
    "numPassedTestSuites": 0,
    "numPassedTests": 4,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1636438239282,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 9,
        "numPassingTests": 4,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1636438262586, "runtime": 22402, "slow": true, "start": 1636438240184 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 475,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 500,
                  "expected": 201,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:108:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 179,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 500,
                  "expected": 200,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:128:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 147,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 500,
                  "expected": 200,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:144:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 109,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 500,
                  "expected": 200,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:155:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 118,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 500,
                  "expected": 200,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:167:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 121,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 500,
                  "expected": 200,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:199:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 148,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 500,
                  "expected": 200,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:217:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 113,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 103,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 106,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 99,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 100,
            "failureDetails": [
              {
                "matcherResult": {
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m1\u001b[39m\nReceived number of calls: \u001b[31m0\u001b[39m",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m1\u001b[39m\nReceived number of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:273:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 82,
            "failureDetails": [
              {
                "matcherResult": {
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m1\u001b[39m\nReceived number of calls: \u001b[31m0\u001b[39m",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m1\u001b[39m\nReceived number of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:286:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 106 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mcreateResource(testCreateRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 108 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 109 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:108:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should update record status and return 200\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 126 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mupdateResource(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m testUpdateRecordRequest)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 127 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 128 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 129 |\u001b[39m       expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 130 |\u001b[39m       expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 131 |\u001b[39m         \u001b[33m...\u001b[39mtestUpdateRecordRequest\u001b[33m.\u001b[39mmetadata\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:128:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should delete record return 200\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 142 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mdeleteResource(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 143 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 144 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 145 |\u001b[39m       expect(recordDeleteMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 146 |\u001b[39m       expect(recordDeleteMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 147 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:144:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should return 200 and true when record exists\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 153 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mrecordExists(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 154 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 155 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 156 |\u001b[39m       expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 157 |\u001b[39m       expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({ id\u001b[33m:\u001b[39m \u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 158 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual({ exists\u001b[33m:\u001b[39m \u001b[36mtrue\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:155:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should return 200 and false when record doesn't exists\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 165 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mrecordExists(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 166 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 167 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 168 |\u001b[39m       expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 169 |\u001b[39m       expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({ id\u001b[33m:\u001b[39m \u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 170 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual({ exists\u001b[33m:\u001b[39m \u001b[36mfalse\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:167:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ find should return 200 and list of records when match\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 197 |\u001b[39m       ]\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 198 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 199 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 200 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual(expectedResponse)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 201 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 202 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:199:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ find should return 200 and empty list of records when don't match\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 215 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 216 |\u001b[39m       \u001b[36mconst\u001b[39m expectedResponse\u001b[33m:\u001b[39m unknown[] \u001b[33m=\u001b[39m []\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 217 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 218 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual(expectedResponse)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 219 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 220 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:217:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Sad Path ‚Ä∫ should return status code 404 on PUT request for non existing record\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected number of calls: \u001b[32m1\u001b[39m\n    Received number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 271 |\u001b[39m       recordCountMock\u001b[33m.\u001b[39mmockResolvedValue(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 272 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mupdateResource(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m testUpdateRecordRequest)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 273 |\u001b[39m       expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 274 |\u001b[39m       expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 275 |\u001b[39m         id\u001b[33m:\u001b[39m \u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 276 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:273:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Sad Path ‚Ä∫ should return status code 404 on DELETE request for non existing record\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected number of calls: \u001b[32m1\u001b[39m\n    Received number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 284 |\u001b[39m       recordCountMock\u001b[33m.\u001b[39mmockResolvedValue(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 285 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mdeleteResource(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 286 |\u001b[39m       expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 287 |\u001b[39m       expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 288 |\u001b[39m         id\u001b[33m:\u001b[39m \u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 289 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:286:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1636438263085,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1636438799599,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1636438821188, "runtime": 20747, "slow": true, "start": 1636438800441 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 390,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 194,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 136,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 138,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 109,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 134,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 144,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 132,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 123,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 130,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 128,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 121,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 111,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1636438821590,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 1,
    "numFailedTests": 9,
    "numPassedTestSuites": 0,
    "numPassedTests": 4,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1636439174978,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 9,
        "numPassingTests": 4,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1636439196231, "runtime": 20332, "slow": true, "start": 1636439175899 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 342,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 500,
                  "expected": 201,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m201\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:108:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 169,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 500,
                  "expected": 200,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:128:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 138,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 500,
                  "expected": 200,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:144:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 109,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 500,
                  "expected": 200,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:155:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 184,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 500,
                  "expected": 200,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:167:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 143,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 500,
                  "expected": 200,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:199:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 103,
            "failureDetails": [
              {
                "matcherResult": {
                  "actual": 500,
                  "expected": 200,
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                  "name": "toBe",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:217:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 87,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 107,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 81,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 89,
            "failureDetails": [
              {
                "matcherResult": {
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m1\u001b[39m\nReceived number of calls: \u001b[31m0\u001b[39m",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m1\u001b[39m\nReceived number of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:273:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 95,
            "failureDetails": [
              {
                "matcherResult": {
                  "message": "\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m1\u001b[39m\nReceived number of calls: \u001b[31m0\u001b[39m",
                  "pass": false
                }
              }
            ],
            "failureMessages": [
              "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m1\u001b[39m\nReceived number of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts:286:31)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)"
            ],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "failed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should create record and return status code 201 and the created record id\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m201\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 106 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mcreateResource(testCreateRecordModel)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 107 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 108 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mCREATED\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 109 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 110 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mvalues)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(expectedEntity)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 111 |\u001b[39m       expect(insertQueryBuilderMock\u001b[33m.\u001b[39mreturning)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:108:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should update record status and return 200\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 126 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mupdateResource(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m testUpdateRecordRequest)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 127 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 128 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 129 |\u001b[39m       expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 130 |\u001b[39m       expect(recordSaveMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 131 |\u001b[39m         \u001b[33m...\u001b[39mtestUpdateRecordRequest\u001b[33m.\u001b[39mmetadata\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:128:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should delete record return 200\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 142 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mdeleteResource(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 143 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 144 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 145 |\u001b[39m       expect(recordDeleteMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 146 |\u001b[39m       expect(recordDeleteMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 147 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:144:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should return 200 and true when record exists\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 153 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mrecordExists(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 154 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 155 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 156 |\u001b[39m       expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 157 |\u001b[39m       expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({ id\u001b[33m:\u001b[39m \u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 158 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual({ exists\u001b[33m:\u001b[39m \u001b[36mtrue\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:155:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ should return 200 and false when record doesn't exists\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 165 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mrecordExists(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 166 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 167 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 168 |\u001b[39m       expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 169 |\u001b[39m       expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({ id\u001b[33m:\u001b[39m \u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 170 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual({ exists\u001b[33m:\u001b[39m \u001b[36mfalse\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:167:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ find should return 200 and list of records when match\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 197 |\u001b[39m       ]\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 198 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 199 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 200 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual(expectedResponse)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 201 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 202 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:199:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Happy Path ‚Ä∫ find should return 200 and empty list of records when don't match\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m200\u001b[39m\n    Received: \u001b[31m500\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 215 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 216 |\u001b[39m       \u001b[36mconst\u001b[39m expectedResponse\u001b[33m:\u001b[39m unknown[] \u001b[33m=\u001b[39m []\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 217 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(httpStatusCodes\u001b[33m.\u001b[39m\u001b[33mOK\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 218 |\u001b[39m       expect(response\u001b[33m.\u001b[39mbody)\u001b[33m.\u001b[39mtoEqual(expectedResponse)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 219 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 220 |\u001b[39m       expect(findMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:217:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Sad Path ‚Ä∫ should return status code 404 on PUT request for non existing record\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected number of calls: \u001b[32m1\u001b[39m\n    Received number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 271 |\u001b[39m       recordCountMock\u001b[33m.\u001b[39mmockResolvedValue(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 272 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mupdateResource(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m testUpdateRecordRequest)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 273 |\u001b[39m       expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 274 |\u001b[39m       expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 275 |\u001b[39m         id\u001b[33m:\u001b[39m \u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 276 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:273:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m‚óè \u001b[22m\u001b[1mrecords ‚Ä∫ Sad Path ‚Ä∫ should return status code 404 on DELETE request for non existing record\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected number of calls: \u001b[32m1\u001b[39m\n    Received number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 284 |\u001b[39m       recordCountMock\u001b[33m.\u001b[39mmockResolvedValue(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 285 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m requestSender\u001b[33m.\u001b[39mdeleteResource(\u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 286 |\u001b[39m       expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 287 |\u001b[39m       expect(recordCountMock)\u001b[33m.\u001b[39mtoHaveBeenCalledWith({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 288 |\u001b[39m         id\u001b[33m:\u001b[39m \u001b[32m'170dd8c0-8bad-498b-bb26-671dcf19aa3c'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 289 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/integration/records/records.spec.ts\u001b[39m\u001b[0m\u001b[2m:286:31)\u001b[22m\u001b[2m\u001b[22m\n"
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1636439196625,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1636439315042,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1636439334258, "runtime": 18371, "slow": true, "start": 1636439315887 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 384,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 195,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 130,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 127,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 116,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 153,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 144,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 113,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 118,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 103,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 103,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 117,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 100,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1636439334609,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  },
  {
    "numFailedTestSuites": 0,
    "numFailedTests": 0,
    "numPassedTestSuites": 1,
    "numPassedTests": 13,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 13,
    "openHandles": [],
    "snapshot": {
      "added": 0,
      "didUpdate": false,
      "failure": false,
      "filesAdded": 0,
      "filesRemoved": 0,
      "filesRemovedList": [],
      "filesUnmatched": 0,
      "filesUpdated": 0,
      "matched": 0,
      "total": 0,
      "unchecked": 0,
      "uncheckedKeysByFile": [],
      "unmatched": 0,
      "updated": 0
    },
    "startTime": 1638363772773,
    "success": false,
    "testResults": [
      {
        "leaks": false,
        "numFailingTests": 0,
        "numPassingTests": 13,
        "numPendingTests": 0,
        "numTodoTests": 0,
        "openHandles": [],
        "perfStats": { "end": 1638363790799, "runtime": 17068, "slow": true, "start": 1638363773731 },
        "skipped": false,
        "snapshot": { "added": 0, "fileDeleted": false, "matched": 0, "unchecked": 0, "uncheckedKeys": [], "unmatched": 0, "updated": 0 },
        "testFilePath": "C:\\Git\\Projects\\raster-catalog-manager\\tests\\integration\\records\\records.spec.ts",
        "testResults": [
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 289,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should create record and return status code 201 and the created record id",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should create record and return status code 201 and the created record id"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 154,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should update record status and return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should update record status and return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 106,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should delete record return 200",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should delete record return 200"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 89,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and true when record exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and true when record exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 87,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path should return 200 and false when record doesn't exists",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return 200 and false when record doesn't exists"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 72,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and list of records when match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and list of records when match"
          },
          {
            "ancestorTitles": ["records", "Happy Path"],
            "duration": 99,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Happy Path find should return 200 and empty list of records when don't match",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 200 and empty list of records when don't match"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 93,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on PUT request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on PUT request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 69,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid body",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid body"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 92,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path should return status code 400 on POST request with invalid footprint",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 400 on POST request with invalid footprint"
          },
          {
            "ancestorTitles": ["records", "Bad Path"],
            "duration": 69,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Bad Path find should return 400 when body is invalid",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "find should return 400 when body is invalid"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 73,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on PUT request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on PUT request for non existing record"
          },
          {
            "ancestorTitles": ["records", "Sad Path"],
            "duration": 79,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "records Sad Path should return status code 404 on DELETE request for non existing record",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 0,
            "status": "passed",
            "title": "should return status code 404 on DELETE request for non existing record"
          }
        ],
        "failureMessage": null
      }
    ],
    "wasInterrupted": false,
    "coverageMap": {},
    "config": {
      "bail": 0,
      "changedFilesWithAncestor": false,
      "collectCoverage": true,
      "collectCoverageFrom": ["src/**/*.{ts}", "!**/node_modules/**", "!**/vendor/**"],
      "coverageDirectory": "C:\\Git\\Projects\\raster-catalog-manager\\coverage",
      "coverageProvider": "babel",
      "coverageReporters": ["text", "html"],
      "detectLeaks": false,
      "detectOpenHandles": false,
      "errorOnDeprecated": false,
      "expand": false,
      "findRelatedTests": false,
      "forceExit": false,
      "json": false,
      "lastCommit": false,
      "listTests": false,
      "logHeapUsage": false,
      "maxConcurrency": 5,
      "maxWorkers": 7,
      "noStackTrace": false,
      "nonFlagArgs": [],
      "notify": false,
      "notifyMode": "failure-change",
      "onlyChanged": false,
      "onlyFailures": false,
      "passWithNoTests": false,
      "projects": [],
      "reporters": [
        ["default", {}],
        [
          "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\jest-html-reporters\\index.js",
          { "multipleReportsUnitePath": "./report", "pageTitle": "integration", "publicPath": "./reports", "filename": "integration.html" }
        ]
      ],
      "rootDir": "C:\\Git\\Projects\\raster-catalog-manager",
      "runTestsByPath": false,
      "skipFilter": false,
      "testFailureExitCode": 1,
      "testPathPattern": "",
      "testSequencer": "C:\\Git\\Projects\\raster-catalog-manager\\node_modules\\@jest\\test-sequencer\\build\\index.js",
      "updateSnapshot": "new",
      "useStderr": false,
      "verbose": true,
      "watch": false,
      "watchAll": false,
      "watchman": true
    },
    "endTime": 1638363791100,
    "_reporterOptions": {
      "publicPath": "./reports",
      "filename": "integration.html",
      "expand": false,
      "pageTitle": "integration",
      "hideIcon": false,
      "testCommand": "npx jest",
      "openReport": false,
      "multipleReportsUnitePath": "./report",
      "failureMessageOnly": false,
      "enableMergeData": false,
      "dataMergeLevel": 1
    },
    "attachInfos": {}
  }
]
