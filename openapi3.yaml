openapi: 3.0.1
info:
  title: Raster Catalog Manager
  description: CRUD Raster Records On Catalog DB
  version: 6.3.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /records:
    post:
      operationId: createRecord
      summary: Creates a new record
      tags:
        - records
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                ./Schema/rasterCatalog/insertRequest.yaml#/components/schemas/InsertRequest
      responses:
        '201':
          description: Record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/operationRecordResponse'
        '400':
          description: Bad Request, could not create record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '409':
          description: Bad Request, could not create record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Bad Request, could not create record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /records/{recordId}:
    parameters:
      - $ref: '#/components/parameters/recordId'
    put:
      operationId: updateRecord
      summary: Updates a record
      tags:
        - records
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                ./Schema/rasterCatalog/updateRequest.yaml#/components/schemas/UpdateRequest
      responses:
        '200':
          description: Record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/operationRecordResponse'
        '400':
          description: Bad Request, could not update record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      operationId: deleteRecord
      summary: Delete a record
      responses:
        '200':
          description: Record deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/operationRecordResponse'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      tags:
        - records
  /records/metadata/{recordId}:
    parameters:
      - $ref: '#/components/parameters/recordId'
    put:
      operationId: EditRecord
      summary: updated records editable metadata fields
      tags:
        - records
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                ./Schema/rasterCatalog/editMetadataRequest.yaml#/components/schemas/EditMetadataRequest
      responses:
        '200':
          description: Record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/operationRecordResponse'
        '400':
          description: Bad Request, could not update record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /records/exists/{recordId}:
    parameters:
      - $ref: '#/components/parameters/recordId'
    get:
      operationId: recordExists
      summary: Checks if a record exists
      tags:
        - records
      responses:
        '200':
          description: record exists status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recordExistsResponse'
  /records/find:
    post:
      operationId: findRecords
      summary: return list of matching records
      tags:
        - records
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/findRecordModelRequest'
      responses:
        '200':
          description: retrieved matching records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/findRecordModelResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /records/find/versions:
    post:
      operationId: getVersions
      summary: return list of record versions
      tags:
        - records
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/findRecordModelRequest'
      responses:
        '200':
          description: retrieved matching records
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
components:
  parameters:
    recordId:
      in: path
      name: recordId
      description: ID of Record
      required: true
      schema:
        $ref: '#/components/schemas/recordId'
  schemas:
    error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    recordId:
      type: string
      format: uuid
    status:
      type: string
      enum:
        - success
    recordExistsResponse:
      type: object
      properties:
        exists:
          type: boolean
    operationRecordResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/recordId'
        status:
          $ref: '#/components/schemas/status'
      additionalProperties: false
    findRecordModelResponse:
      type: object
      description: raster catalog find model
      properties:
        metadata:
          $ref: >-
            ./Schema/fullLayerMetadata.yaml#/components/schemas/fullLayerMetadata
        links:
          type: array
          items:
            $ref: ./Schema/link.yaml#/components/schemas/Link
    findRecordModelRequest:
      type: object
      description: raster catalog find model
      properties:
        id:
          $ref: '#/components/schemas/recordId'
        metadata:
          $ref: >-
            ./Schema/fullLayerMetadata.yaml#/components/schemas/fullLayerMetadata
        links:
          type: array
          items:
            $ref: ./Schema/link.yaml#/components/schemas/Link
      additionalProperties: false
