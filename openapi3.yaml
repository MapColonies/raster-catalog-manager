openapi: 3.0.1
info:
  title: Raster Catalog Manager
  description: CRUD Raster Records On Catalog DB
  version: 1.0.0
paths:
  /records:
    get:
      operationId: findRecords // TODO Get Reponse Body From Models
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/type'
      summary: find records by cercaria // TODO Get Reponse Body From Models
      tags:
        - records
      responses:
        200:
          description: Array of records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/record'
        204:
          description: No records
    post:
      operationId: createRecord
      summary: Creates a new record - // TODO Get Request Body From Models
      tags:
        - records
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createRecordPayload'
      responses:
        201:
          description: Record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createRecordResponse'
        400:
          description: Invalid request, could not create record

  /records/{recordId}:
    parameters:
      - $ref: '#/components/parameters/recordId'
    get:
      operationId: getRecord
      summary: Get record by id // TODO Get Reponse Body From Models
      tags:
        - records
      responses:
        200:
          description: Record data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/record'
        404:
          description: Record not found
    put:
      operationId: updateRecord
      summary: Updates a record // TODO Get Reuest Body From Models
      tags:
        - records
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateRecordPayload'
      responses:
        200:
          description: Record updated successfully
        400:
          description: Invalid request, could not update record
        404:
          description: Record not found
    delete:
      operationId: deleteRecord
      summary: Delete a record
      responses:
        200:
          description: Record deleted successfully
        404:
          description: Record not found
        422:
          description: Record have tasks //TODO check for discretes / best relations
      tags:
        - records

components:
  parameters:
    recordId:
      in: path
      name: recordId
      description: ID of Record
      required: true
      schema:
        $ref: '#/components/schemas/recordId'
    resourceId:
      in: query
      name: resourceId
      description: Id of resource
      required: false
      schema:
        type: string
    version:
      in: query
      name: version
      description: |
        Version of resource.  
        If this parameter is used, the 'resourceId' parameter must be present.
      required: false
      schema:
        type: string
    type:
      in: query
      name: type
      description: |
        The type of the record.
      required: false
      schema:
        type: string

  schemas:
    recordId:
      type: string
      format: uuid
    percentage:
      type: integer
      minimum: 0
      maximum: 100
    status:
      type: string
      enum:
        - Pending
        - In-Progress
        - Completed
        - Failed
      example: 'Pending'
    record:
      allOf:
        - properties:
            id:
              $ref: '#/components/schemas/recordId'
        - $ref: '#/components/schemas/createRecordPayload'
        - properties:
            created:
              type: string
              format: date-time
            updated:
              type: string
              format: date-time
        - $ref: '#/components/schemas/updateRecordPayload'
    createRecordPayload:
      type: object
      properties:
        resourceId:
          type: string
          maxLength: 300
        version:
          type: string
          maxLength: 30
        description:
          type: string
          maxLength: 2000
        parameters:
          type: object
        status:
          $ref: '#/components/schemas/status'
        reason:
          type: string
          maxLength: 255
        type:
          type: string
          maxLength: 255
        percentage:
          $ref: '#/components/schemas/percentage'
      required:
        - resourceId
        - version
        - type
        - parameters
      additionalProperties: false

    createRecordResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/recordId'
      additionalProperties: false
    updateRecordPayload:
      type: object
      properties:
        parameters:
          type: object
        status:
          $ref: '#/components/schemas/status'
        percentage:
          $ref: '#/components/schemas/percentage'
        reason:
          type: string
        isCleaned:
          type: boolean
      additionalProperties: false
